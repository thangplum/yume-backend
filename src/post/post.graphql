type Post {
  id: ID
  updated: String!
  created: String!
  caption: String!
  comment: String!
  category: Category!
  author: User
  numLikes: Int
  likes: [String]
  slug: String!
  replies(page: Int, limit: Int): [Reply!]
}

type Query {
  posts(page: Int, limit: Int, newest: Boolean): PaginatedPost!
  post(id: ID!): Post!
  postBySlug(slug: String!): Post!
  searchPost(query: String!, page: Int, limit: Int): PaginatedPost!
  # posts(first: Int, after: String, last: Int, before: String): PostConnection # for cursor pagination
}

type Mutation {
  createPost(caption: String!, comment: String!, category: ID!): Post!
  updatePost(id: ID!, caption: String, comment: String): Post!
  deletePost(id: ID!): Post!
  likePost(id: ID!): Post!
  bookmark(id: ID!): User!
  unbookmark(id: ID!): User!
}

type PaginatedPost {
  nodes: [Post!]
  pages: Int!
}

# For cursor based pagination
type PostConnection {
  edges: [PostEdge]
  pageInfo: PostPageInfo!
}

type PostEdge {
  node: Post!
  cursor: String!
}

type PostPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}
