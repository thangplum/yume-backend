var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.707,1,2.467]],["body/controllers/AppController.html",[0,2.629,1,3.798,2,1.918,3,0.165,4,0.193,5,0.165,6,3.66,7,0.341,8,1.212,9,5.514,10,2.062,11,3.484,12,1.426,13,0.021,14,0.567,15,4.28,16,1.212,17,0.856,18,4.28,19,4.28,20,4.28,21,0.993,22,0.89,23,0.841,24,4.717,25,0.291,26,2.175,27,2.04,28,2.175,29,0.624,30,3.566,31,3.66,32,2.947,33,2.175,34,3.318,35,4.28,36,0.193,37,0.243,38,1.446,39,2.079,40,1.673,41,1.147,42,4.28,43,4.28,44,4.28,45,4.28,46,4.28,47,0.012,48,0.015,49,0.012]],["title/modules/AppModule.html",[50,1.087,51,2.467]],["body/modules/AppModule.html",[1,3.609,2,2.021,3,0.123,4,0.143,5,0.123,13,0.021,24,3.857,25,0.321,29,0.463,30,3.655,31,2.719,36,0.143,37,0.18,47,0.009,48,0.013,49,0.009,50,1.59,51,4.982,52,1.343,53,1.343,54,1.515,55,1.515,56,1.343,57,2.498,58,1.515,59,2.719,60,2.719,61,2.719,62,3.951,63,3.951,64,3.951,65,3.951,66,3.951,67,3.951,68,3.655,69,2.149,70,1.515,71,1.515,72,3.179,73,2.452,74,3.179,75,1.857,76,3.179,77,3.179,78,1.857,79,1.268,80,3.179,81,2.719,82,3.179,83,4.51,84,3.857,85,2.415,86,3.105,87,3.179,88,3.179,89,3.105,90,3.179,91,3.179,92,3.179,93,1.515,94,3.179,95,3.179,96,3.179,97,3.179,98,3.179,99,2.189,100,1.857,101,3.426,102,3.857]],["title/injectables/AppService.html",[30,2.093,103,0.745]],["body/injectables/AppService.html",[3,0.198,4,0.231,5,0.198,7,0.408,8,1.356,9,5.878,13,0.021,14,0.526,16,1.126,17,0.958,25,0.231,29,0.747,30,3.605,36,0.231,37,0.29,41,1.065,47,0.014,48,0.017,49,0.014,103,1.283,104,2.043,105,4.381,106,5.123,107,5.123,108,5.123]],["title/modules/AuthModule.html",[50,1.087,62,2.263]],["body/modules/AuthModule.html",[3,0.14,4,0.164,5,0.14,13,0.021,25,0.311,29,0.529,33,1.845,34,3.852,36,0.164,37,0.206,47,0.01,48,0.014,49,0.01,50,1.978,52,1.533,53,1.533,54,1.73,55,1.73,56,1.533,57,2.681,58,2.681,62,4.506,68,3.81,69,2.357,70,1.73,71,1.73,73,2.689,81,3.105,109,3.105,110,3.63,111,3.105,112,3.105,113,4.119,114,4.119,115,3.63,116,3.105,117,3.63,118,3.63,119,3.63,120,2.758,121,2.499,122,3.105,123,3.63,124,2.499,125,3.553,126,2.689,127,3.758,128,3.405,129,3.105,130,3.63,131,3.63,132,3.63,133,3.63,134,3.63,135,3.63,136,3.63,137,3.63,138,3.105,139,3.105,140,3.63,141,3.105,142,3.105]],["title/injectables/AuthService.html",[34,1.948,103,0.745]],["body/injectables/AuthService.html",[3,0.141,4,0.165,5,0.141,7,0.292,8,1.092,10,2.208,11,3.14,13,0.021,14,0.58,16,1.092,21,1.31,22,1.174,23,1.11,25,0.273,29,0.533,34,2.702,36,0.165,37,0.207,38,1.679,39,1.874,40,1.508,41,1.174,47,0.01,48,0.014,49,0.01,103,1.034,104,1.458,120,2.779,143,3.128,144,4.971,145,3.128,146,3.321,147,6.687,148,3.657,149,0.58,150,4.971,151,3.657,152,2.385,153,4.971,154,3.079,155,3.657,156,1.235,157,3.14,158,2.137,159,3.657,160,3.128,161,2.31,162,1.591,163,1.378,164,3.657,165,2.779,166,5.182,167,3.657,168,3.657,169,3.657,170,2.369,171,1.285,172,3.657,173,3.128,174,3.657,175,3.657]],["title/classes/CategoryDTO.html",[37,0.203,176,2.263]],["body/classes/CategoryDTO.html",[3,0.19,4,0.221,5,0.19,7,0.391,12,1.553,13,0.02,14,0.617,17,1.051,22,1.351,23,1.181,25,0.221,36,0.221,37,0.341,47,0.014,48,0.017,49,0.014,149,0.617,176,3.794,177,1.201,178,4.192,179,2.143,180,3.532,181,4.059,182,4.902,183,4.902,184,2.665]],["title/classes/CategoryEntity.html",[37,0.203,185,1.82]],["body/classes/CategoryEntity.html",[3,0.167,4,0.195,5,0.167,7,0.345,12,1.674,13,0.021,14,0.665,17,1.005,22,1.276,25,0.195,36,0.195,37,0.246,47,0.012,48,0.016,49,0.012,149,0.665,171,1.586,177,1.061,179,1.982,180,3.337,185,3.587,186,3.703,187,5.249,188,2.981,189,3.51,190,4.33,191,3.51,192,4.33,193,3.826,194,4.33,195,2.981,196,4.33,197,2.735,198,2.529,199,2.735,200,2.981,201,2.981,202,1.829,203,4.33,204,2.981,205,3.51,206,4.33,207,2.981,208,4.33]],["title/modules/CategoryModule.html",[50,1.087,63,2.263]],["body/modules/CategoryModule.html",[3,0.166,4,0.194,5,0.166,13,0.021,25,0.318,29,0.628,36,0.194,37,0.244,47,0.012,48,0.015,49,0.012,50,1.857,52,1.818,53,1.818,54,2.052,55,2.052,56,1.818,57,2.917,58,2.052,63,4.453,69,2.639,70,2.052,71,2.052,73,2.34,78,2.515,79,1.717,185,2.187,209,3.681,210,3.681,211,3.998,212,3.067,213,4.305,214,3.681,215,3.812,216,4.305,217,3.681,218,2.087,219,2.34,220,3.681,221,1.87,222,1.929,223,4.305]],["title/classes/CategoryResolver.html",[37,0.203,215,2.467]],["body/classes/CategoryResolver.html",[3,0.12,4,0.14,5,0.12,7,0.248,8,0.976,10,2.383,12,1.544,13,0.021,14,0.638,16,1.313,17,1.033,21,1.311,22,1.329,23,1.111,25,0.255,36,0.14,37,0.177,38,1.5,39,1.674,40,1.348,41,1.242,47,0.009,48,0.012,49,0.009,93,1.483,149,0.532,156,1.051,162,1.422,163,2.252,171,1.339,176,2.806,177,0.762,180,2.415,205,3.773,211,3.629,212,2.866,214,2.662,215,3.058,220,2.662,224,2.662,225,4.831,226,4.43,227,5.65,228,2.806,229,3.112,230,3.112,231,4.443,232,3.112,233,3.112,234,4.443,235,3.112,236,3.112,237,5.65,238,3.272,239,3.112,240,4.443,241,3.112,242,3.112,243,3.567,244,3.112,245,1.966,246,1.581,247,1.818,248,2.662,249,3.112,250,3.112,251,3.112,252,3.112,253,3.112,254,3.112,255,3.112,256,3.112,257,3.112,258,3.112]],["title/injectables/CategoryService.html",[103,0.745,211,2.093]],["body/injectables/CategoryService.html",[3,0.116,4,0.136,5,0.116,7,0.24,8,0.953,10,2.316,13,0.021,14,0.606,16,1.223,17,0.79,21,1.18,22,1.157,23,1,25,0.286,29,0.439,36,0.136,37,0.171,38,1.465,39,1.635,40,1.316,41,1.157,47,0.008,48,0.012,49,0.008,79,1.201,103,0.902,104,1.201,149,0.523,156,1.017,162,1.781,163,2.316,165,3.296,171,1.314,176,3.515,180,3.442,185,1.53,187,4.349,202,1.272,205,3.725,211,2.534,212,1.35,217,2.575,218,1.135,219,1.637,225,4.759,226,3.71,248,2.575,259,2.575,260,2.987,261,4.228,262,5.565,263,3.011,264,3.999,265,3.864,266,3.011,267,3.71,268,4.339,269,3.011,270,3.296,271,3.011,272,3.011,273,3.011,274,1.759,275,1.902,276,3.011,277,1.902,278,2.575,279,2.288,280,4.339,281,3.212,282,3.71,283,2.534,284,1.944,285,2.987,286,2.987,287,2.987,288,4.339,289,3.011,290,3.011,291,3.011]],["title/classes/CommentDTO.html",[37,0.203,292,2.263]],["body/classes/CommentDTO.html",[3,0.199,4,0.233,5,0.199,7,0.411,12,1.333,13,0.02,14,0.53,17,0.962,25,0.233,36,0.233,37,0.351,47,0.014,48,0.017,49,0.014,149,0.53,177,1.263,179,2.21,181,3.88,184,2.804,292,3.913,293,4.411,294,2.806,295,5.158]],["title/classes/CommentEntity.html",[37,0.203,296,1.948]],["body/classes/CommentEntity.html",[3,0.158,4,0.184,5,0.158,7,0.325,12,1.699,13,0.021,14,0.675,17,0.983,25,0.269,36,0.184,37,0.231,47,0.011,48,0.015,49,0.011,149,0.675,171,1.542,177,0.999,179,1.907,189,2.577,191,3.377,193,3.682,195,2.809,197,2.577,198,2.383,199,2.577,200,2.809,202,1.723,204,3.682,221,2.138,222,1.829,294,2.52,296,2.907,297,3.489,298,3.243,299,3.243,300,3.442,301,3.1,302,4.08,303,4.08,304,3.124,305,4.107,306,4.08,307,4.08,308,2.674,309,4.08,310,3.682,311,2.383,312,4.08,313,4.08]],["title/modules/CommentModule.html",[50,1.087,64,2.263]],["body/modules/CommentModule.html",[3,0.173,4,0.202,5,0.173,13,0.021,25,0.317,29,0.652,36,0.202,37,0.254,47,0.012,48,0.016,49,0.012,50,1.891,52,1.89,53,1.89,54,2.132,55,2.132,56,1.89,57,2.97,58,2.132,64,4.365,69,2.704,70,2.132,71,2.132,73,2.432,78,2.613,79,1.784,221,1.917,222,2.005,296,3.085,308,1.89,311,2.613,314,3.826,315,3.826,316,3.512,317,4.474,318,3.826,319,3.907,320,4.474,321,3.826,322,4.474]],["title/classes/CommentResolver.html",[37,0.203,319,2.467]],["body/classes/CommentResolver.html",[3,0.126,4,0.147,5,0.126,7,0.259,8,1.006,10,2.27,12,1.371,13,0.021,14,0.592,16,1.165,17,1.079,21,1.337,22,1.197,23,1.132,25,0.284,26,1.651,29,0.474,36,0.147,37,0.184,38,1.097,40,0.985,41,1.103,47,0.009,48,0.013,49,0.009,93,1.548,149,0.592,152,2.358,156,1.547,162,1.697,163,1.999,171,1.628,177,0.796,238,3.35,245,2.052,246,2.695,247,1.898,292,2.892,294,2.661,316,3.201,318,2.778,319,3.153,323,2.778,324,5.304,325,3.916,326,3.249,327,3.249,328,3.249,329,3.249,330,3.249,331,3.479,332,3.249,333,3.916,334,2.778,335,3.249,336,1.766,337,2.237,338,3.098,339,2.237,340,2.237,341,2.778,342,3.249,343,2.052,344,3.249,345,3.249,346,3.153,347,3.249,348,2.468,349,2.926,350,3.249,351,3.249,352,3.249]],["title/injectables/CommentService.html",[103,0.745,316,1.82]],["body/injectables/CommentService.html",[3,0.083,4,0.096,5,0.083,7,0.17,8,0.736,10,2.229,13,0.021,14,0.579,16,1.185,17,1.07,21,1.308,22,1.172,23,1.108,25,0.254,29,0.311,36,0.096,37,0.121,38,1.131,39,2.032,40,1.253,41,1.121,47,0.006,48,0.009,49,0.006,79,0.851,103,0.696,104,0.851,126,1.821,149,0.579,152,1.669,156,1.58,162,1.868,163,2.262,171,1.457,202,0.902,221,0.721,222,0.957,260,2.306,264,3.878,274,1.956,275,1.349,277,1.349,281,2.955,283,2.969,284,2.278,285,2.845,286,3.221,287,3.221,292,2.955,294,2.465,296,2.543,298,2.763,300,3.065,308,0.902,311,1.247,316,1.702,321,1.826,325,2.864,333,4.001,334,2.864,341,1.826,349,3.12,353,1.826,354,2.544,355,3.349,356,2.864,357,2.306,358,2.135,359,3.533,360,2.845,361,2.135,362,3.349,363,3.349,364,2.135,365,2.135,366,3.349,367,2.135,368,3.349,369,3.349,370,2.782,371,2.417,372,2.135,373,1.956,374,3.712,375,2.864,376,2.135,377,3.349,378,2.135,379,2.135,380,1.826,381,1.47,382,2.544,383,2.135,384,1.826,385,2.135,386,2.544,387,3.349,388,2.306,389,3.221,390,2.306,391,3.349,392,5.082,393,1.826,394,1.47,395,1.47,396,2.135,397,2.135,398,3.349,399,2.135,400,1.622,401,2.135]],["title/modules/ConfigModule.html",[50,1.087,65,2.263]],["body/modules/ConfigModule.html",[3,0.18,4,0.21,5,0.18,13,0.021,25,0.263,29,0.679,36,0.21,37,0.264,47,0.013,48,0.016,49,0.013,50,1.926,52,1.967,53,1.967,54,2.219,55,2.219,56,1.967,57,2.773,58,3.025,65,4.324,69,2.773,70,2.219,71,2.219,75,4.22,101,3.537,284,2.087,402,3.982,403,3.982,404,4.656,405,5.82,406,4.656,407,4.656,408,4.656,409,4.656]],["title/classes/ConfigService.html",[37,0.203,75,2.093]],["body/classes/ConfigService.html",[3,0.166,4,0.194,5,0.166,7,0.343,8,1.217,13,0.021,14,0.629,16,0.946,17,1.095,21,1.285,22,1.151,23,1.088,25,0.276,29,0.628,36,0.194,37,0.244,38,1.454,39,2.307,40,1.857,41,0.895,47,0.012,48,0.015,49,0.012,75,3.235,103,0.895,149,0.629,177,1.054,179,1.975,410,3.681,411,6.121,412,5.537,413,5.537,414,6.121,415,5.537,416,5.537,417,4.305,418,4.305,419,4.735,420,5.537,421,4.305,422,4.305,423,4.305,424,4.305,425,4.305]],["title/injectables/GqlAuthGuard.html",[103,0.745,336,1.948]],["body/injectables/GqlAuthGuard.html",[3,0.172,4,0.201,5,0.172,7,0.355,8,1.242,13,0.021,14,0.457,16,0.977,21,1.032,22,0.925,23,0.874,25,0.28,29,0.648,32,3.061,33,2.259,36,0.201,37,0.252,41,0.925,47,0.012,48,0.016,49,0.012,93,2.119,99,4.503,100,2.598,103,1.175,104,1.773,125,3.57,149,0.457,158,2.598,162,1.423,336,3.073,426,3.803,427,3.803,428,4.834,429,4.295,430,5.653,431,5.653,432,5.653,433,5.653,434,5.593,435,4.447,436,4.447,437,3.803,438,3.378,439,4.447,440,3.061,441,3.803,442,4.447]],["title/classes/HttpErrorFilter.html",[37,0.203,86,2.467]],["body/classes/HttpErrorFilter.html",[3,0.16,4,0.187,5,0.16,7,0.331,8,1.188,13,0.021,14,0.426,16,0.911,21,0.963,22,0.862,23,0.815,25,0.187,28,2.108,29,0.605,36,0.187,37,0.235,41,0.862,47,0.012,48,0.015,49,0.012,86,3.722,149,0.426,158,2.423,162,2.115,165,3.152,177,1.016,274,3.722,284,1.859,440,2.856,443,4.623,444,3.547,445,4.623,446,6.372,447,6.014,448,5.406,449,6.014,450,6.372,451,4.148,452,4.148,453,3.547,454,4.148,455,4.148,456,5.406,457,3.547,458,4.148,459,5.406,460,4.148,461,4.148,462,4.148,463,4.148,464,4.148,465,4.148,466,4.623,467,3.547,468,4.623,469,4.148,470,4.148,471,4.148,472,4.148,473,4.148,474,4.148]],["title/injectables/JwtStrategy.html",[103,0.745,113,2.263]],["body/injectables/JwtStrategy.html",[2,2.384,3,0.156,4,0.183,5,0.156,7,0.323,8,1.169,10,2.007,13,0.021,14,0.546,16,0.889,21,0.939,22,0.841,23,0.795,25,0.285,28,2.702,29,0.59,33,2.056,36,0.183,37,0.229,38,2.007,41,0.841,47,0.011,48,0.015,49,0.011,103,1.106,104,1.613,113,3.359,121,2.786,122,3.46,125,3.752,127,3.074,128,2.786,139,3.46,149,0.416,166,3.46,170,1.928,171,1.046,428,4.548,429,4.041,438,3.074,475,3.46,476,4.548,477,4.046,478,5.319,479,4.046,480,5.319,481,3.662,482,5.112,483,4.548,484,5.319,485,5.319,486,4.046,487,3.46,488,3.46,489,3.46,490,4.046,491,4.046,492,4.046,493,4.046,494,4.046,495,4.046,496,4.046]],["title/injectables/LocalStrategy.html",[103,0.745,114,2.263]],["body/injectables/LocalStrategy.html",[3,0.145,4,0.17,5,0.145,7,0.3,8,1.113,10,1.934,11,3.198,13,0.021,14,0.52,16,1.258,17,1.023,21,1.175,22,1.053,23,0.995,25,0.289,28,3.114,29,0.548,33,1.91,34,3.582,36,0.17,37,0.213,38,1.27,40,1.14,41,0.782,47,0.011,48,0.014,49,0.011,103,1.053,104,1.499,114,3.198,116,3.215,127,2.856,128,2.588,149,0.52,152,2.282,154,2.573,156,1.27,157,3.198,158,2.196,160,3.215,161,2.374,162,1.621,163,1.417,170,2.729,283,2.196,284,1.685,343,2.374,438,2.856,476,4.331,482,3.848,483,4.331,487,3.215,488,3.215,489,3.215,497,3.215,498,3.759,499,3.759,500,5.064,501,3.737,502,3.759,503,5.064,504,3.215,505,5.064,506,3.759,507,3.759,508,3.759]],["title/injectables/LoggingInterceptor.html",[89,2.467,103,0.745]],["body/injectables/LoggingInterceptor.html",[3,0.198,4,0.173,5,0.148,7,0.305,8,1.126,13,0.021,14,0.393,16,0.841,21,0.888,22,0.796,23,0.752,25,0.278,28,2.604,29,0.558,36,0.173,37,0.217,41,1.066,47,0.011,48,0.014,49,0.011,89,3.529,93,1.824,100,2.994,103,1.066,104,1.526,149,0.393,157,3.237,158,2.236,162,2.165,434,5.279,437,3.273,440,2.635,441,3.273,445,3.273,457,3.273,466,3.273,467,4.383,468,3.273,509,3.273,510,5.779,511,3.827,512,5.779,513,6.173,514,3.827,515,5.779,516,5.126,517,3.273,518,5.779,519,3.827,520,5.126,521,3.827,522,3.827,523,5.779,524,3.827,525,3.827,526,5.126,527,5.126,528,3.827,529,3.827,530,5.126,531,3.827,532,5.126,533,3.827]],["title/controllers/PostController.html",[0,1.707,534,2.467]],["body/controllers/PostController.html",[0,1.083,2,1.019,3,0.088,4,0.103,5,0.088,7,0.181,8,0.773,12,1.615,13,0.021,14,0.642,16,1.373,17,1.143,21,1.45,22,1.299,23,1.228,25,0.236,26,1.155,27,1.676,28,1.155,29,0.331,32,1.565,33,1.155,36,0.103,37,0.129,40,0.689,41,1.299,47,0.006,48,0.01,49,0.006,149,0.642,152,0.811,156,2.013,158,1.328,171,1.71,212,1.927,246,1.155,343,1.435,349,3.607,370,2.306,371,2.48,534,2.42,535,1.944,536,1.944,537,3.516,538,3.677,539,3.007,540,3.516,541,3.516,542,3.516,543,3.516,544,3.516,545,3.516,546,3.677,547,2.273,548,2.273,549,2.273,550,2.273,551,2.827,552,3.676,553,2.273,554,2.273,555,1.944,556,1.944,557,2.273,558,2.273,559,2.273,560,2.273,561,2.273,562,2.273,563,2.273,564,3.516,565,2.273,566,2.273,567,3.007,568,2.273,569,2.273,570,2.273,571,2.273,572,2.273,573,2.273,574,2.273,575,1.944,576,3.677,577,2.273,578,2.273,579,2.273,580,1.727,581,3.266,582,1.944,583,1.727,584,1.727,585,1.944,586,2.273,587,2.273,588,3.007,589,2.273,590,1.565,591,2.273,592,4.933,593,4.933,594,2.273,595,1.944,596,2.273,597,1.944,598,2.273,599,1.944,600,1.944,601,1.944,602,2.273,603,1.944,604,2.273,605,2.273,606,3.007,607,2.273,608,2.273,609,2.273,610,2.273,611,1.944,612,2.273,613,2.273,614,1.944]],["title/classes/PostDTO.html",[37,0.203,551,2.093]],["body/classes/PostDTO.html",[3,0.191,4,0.223,5,0.191,7,0.393,12,1.559,13,0.021,14,0.62,17,1.054,25,0.223,36,0.223,37,0.342,47,0.014,48,0.017,49,0.014,149,0.62,177,1.209,179,2.152,181,4.067,184,2.683,294,2.752,551,3.524,615,4.22,616,4.486,617,4.935,618,4.935]],["title/classes/PostEntity.html",[37,0.203,218,1.35]],["body/classes/PostEntity.html",[3,0.129,4,0.15,5,0.129,7,0.266,12,1.748,13,0.021,14,0.695,17,0.986,25,0.263,36,0.15,37,0.189,47,0.009,48,0.013,49,0.009,149,0.695,171,1.391,177,0.817,179,1.664,185,2.961,188,2.297,189,2.947,191,2.947,193,4.012,195,2.297,197,2.107,198,1.949,199,2.107,200,2.297,201,2.297,202,1.409,204,3.212,205,3.398,207,2.297,218,1.759,221,2.203,222,1.495,294,2.273,298,3.168,299,2.925,300,1.814,301,2.535,304,3.404,305,3.705,308,2.461,310,3.705,311,1.949,590,3.705,616,3.705,619,2.853,620,4.088,621,3.143,622,4.602,623,3.336,624,3.336,625,3.336,626,3.336,627,3.336,628,3.336,629,2.853,630,4.427,631,2.853,632,3.336,633,3.336,634,5.381,635,3.336,636,2.853,637,2.535,638,3.336,639,3.336,640,2.853,641,3.336]],["title/modules/PostModule.html",[50,1.087,66,2.263]],["body/modules/PostModule.html",[2,2.388,3,0.157,4,0.183,5,0.157,13,0.021,25,0.321,29,0.592,36,0.183,37,0.23,47,0.011,48,0.015,49,0.011,50,1.805,52,1.714,53,1.714,54,1.934,55,1.934,56,1.714,57,2.835,58,2.539,66,4.398,69,2.539,70,1.934,71,1.934,73,2.206,78,3.113,79,1.618,185,2.707,212,3.018,218,2.008,221,1.8,222,1.819,308,2.251,311,2.37,534,4.096,583,3.083,637,3.083,642,3.47,643,3.47,644,2.844,645,4.058,646,4.058,647,3.47,648,3.668,649,4.058,650,2.793,651,3.47]],["title/classes/PostResolver.html",[37,0.203,648,2.467]],["body/classes/PostResolver.html",[3,0.076,4,0.089,5,0.076,7,0.157,8,0.69,10,2.363,12,1.511,13,0.021,14,0.616,16,1.285,17,1.106,21,1.391,22,1.246,23,1.178,25,0.246,26,1,27,2.328,29,0.287,36,0.089,37,0.112,38,1.06,39,1.183,40,0.952,41,1.216,47,0.005,48,0.009,49,0.005,93,0.938,100,1.15,149,0.601,152,2.465,156,1.51,162,1.871,163,2.204,171,1.736,177,0.482,180,1.07,212,2.333,228,1.983,238,3.45,243,2.697,245,1.243,246,1,247,1.15,294,2.396,331,3.955,336,1.07,337,1.355,338,3.191,339,1.355,340,1.355,346,3.584,348,2.385,349,3.11,370,1.496,371,1.756,538,3.35,539,2.685,546,3.35,551,2.288,552,3.396,555,1.683,575,1.683,583,1.495,584,1.495,588,1.683,595,1.683,597,1.683,600,1.683,603,1.683,606,1.683,611,1.683,614,1.683,616,3.761,621,1.834,644,2.307,648,2.162,650,1.355,652,1.683,653,2.685,654,2.685,655,1.968,656,1.968,657,1.683,658,1.968,659,1.968,660,1.968,661,1.968,662,1.683,663,1.968,664,1.968,665,3.14,666,1.968,667,1.968,668,3.823,669,2.976,670,3.14,671,1.968,672,1.968,673,1.968,674,1.683,675,1.968,676,1.968,677,1.968,678,1.968,679,1.968,680,1.968,681,3.14,682,1.968,683,1.968,684,1.968,685,1.968,686,1.968,687,1.968,688,1.683,689,1.968]],["title/classes/PostResponseDTO.html",[37,0.203,690,2.467]],["body/classes/PostResponseDTO.html",[3,0.163,4,0.19,5,0.163,7,0.335,13,0.02,14,0.711,17,1.056,23,1.259,25,0.19,36,0.19,37,0.239,47,0.012,48,0.015,49,0.012,149,0.711,171,1.565,177,1.031,179,1.946,294,2.557,298,3.291,299,3.291,300,2.287,304,3.742,371,2.445,616,4.168,620,4.6,621,2.458,622,5.178,690,3.756,691,6.001,692,3.196,693,3.537,694,3.598,695,3.598,696,3.598,697,3.598,698,3.598,699,4.207,700,3.598,701,2.657,702,2.896]],["title/injectables/PostService.html",[103,0.745,212,1.606]],["body/injectables/PostService.html",[3,0.056,4,0.065,5,0.056,7,0.115,8,0.533,10,2.241,13,0.021,14,0.583,16,1.218,17,1.093,21,1.318,22,1.181,23,1.116,25,0.235,27,2.9,29,0.21,36,0.065,37,0.082,38,0.819,39,1.965,40,0.955,41,1.084,47,0.004,48,0.007,49,0.004,79,0.573,103,0.504,104,0.573,126,1.319,149,0.583,152,1.7,156,1.691,157,3.162,162,1.817,163,2.35,171,1.628,173,1.23,185,0.731,202,0.607,205,2.828,212,1.087,218,1.796,221,0.486,222,0.644,228,1.532,260,1.67,261,2.391,264,3.404,265,1.843,267,2.691,270,1.843,274,0.84,275,0.908,277,0.908,278,1.23,279,1.092,281,3.162,282,1.23,283,3.148,284,2.415,285,2.842,286,3.447,287,3.447,298,2.833,299,0.782,349,3.352,354,2.391,357,1.67,360,2.167,370,2.271,371,2.007,373,1.417,374,3.083,381,0.99,382,1.843,388,1.67,389,2.545,390,1.67,394,2.167,395,1.67,400,1.092,453,1.23,551,2.159,552,3.402,576,2.691,580,1.843,584,1.092,620,2.808,621,2.616,637,1.092,647,1.23,653,2.691,654,2.075,657,2.075,662,2.075,668,3.161,669,2.391,674,1.23,690,2.167,702,0.99,703,1.23,704,2.426,705,2.426,706,3.147,707,1.438,708,1.438,709,1.438,710,1.438,711,1.438,712,2.426,713,1.438,714,2.426,715,1.438,716,1.438,717,1.438,718,1.23,719,1.438,720,1.438,721,2.426,722,1.438,723,2.426,724,1.438,725,1.438,726,1.438,727,1.438,728,1.438,729,1.438,730,1.438,731,1.438,732,2.426,733,1.438,734,1.438,735,1.438,736,2.426,737,1.438,738,1.438,739,2.426,740,4.765,741,1.438,742,2.426,743,3.829,744,2.426,745,1.438,746,1.438,747,1.438,748,2.426,749,2.426,750,1.438,751,2.075,752,1.438,753,1.438,754,0.99,755,1.438,756,3.147,757,2.426,758,1.438,759,1.438,760,1.438,761,1.23,762,1.438,763,1.438,764,1.092,765,1.23]],["title/controllers/ReplyController.html",[0,1.707,766,2.467]],["body/controllers/ReplyController.html",[0,1.468,2,1.38,3,0.119,4,0.139,5,0.119,7,0.246,8,0.969,12,1.538,13,0.021,14,0.611,16,1.307,17,1.123,21,1.381,22,1.237,23,1.17,25,0.268,26,1.565,27,1.468,29,0.449,32,2.121,33,1.565,36,0.139,37,0.175,40,0.934,41,1.237,47,0.009,48,0.012,49,0.009,149,0.611,152,1.099,156,1.899,171,1.453,246,1.565,300,1.674,343,1.945,349,3.422,370,3.107,371,2.775,536,2.634,556,2.634,567,3.771,580,2.34,581,3.35,582,2.634,585,2.634,592,3.771,593,3.771,599,2.634,601,2.634,644,2.175,766,3.036,767,2.634,768,4.404,769,3.35,770,4.41,771,4.41,772,4.41,773,2.634,774,3.285,775,3.08,776,3.08,777,4.272,778,2.34,779,3.08,780,3.08,781,4.41,782,3.08,783,3.08,784,4.41,785,3.08,786,3.08,787,3.08,788,2.34,789,2.34,790,3.08,791,3.08,792,4.41,793,3.08,794,3.08,795,3.08,796,3.08,797,2.634,798,3.08,799,2.634,800,3.08,801,2.634]],["title/classes/ReplyDTO.html",[37,0.203,774,2.093]],["body/classes/ReplyDTO.html",[3,0.199,4,0.233,5,0.199,7,0.411,12,1.333,13,0.02,14,0.53,17,0.962,25,0.233,36,0.233,37,0.351,47,0.014,48,0.017,49,0.014,149,0.53,177,1.263,179,2.21,181,3.88,184,2.804,294,2.806,774,3.62,802,4.411,803,5.158]],["title/classes/ReplyEntity.html",[37,0.203,308,1.513]],["body/classes/ReplyEntity.html",[3,0.145,4,0.17,5,0.145,7,0.3,12,1.703,13,0.021,14,0.677,17,0.951,25,0.276,27,2.921,36,0.17,37,0.213,47,0.011,48,0.014,49,0.011,149,0.677,171,1.48,177,0.921,179,1.806,188,2.588,189,3.198,191,3.198,193,3.487,195,2.588,197,2.374,198,2.196,199,2.374,200,2.588,201,2.588,202,1.588,204,3.487,207,2.588,218,2.31,219,2.044,221,2.07,222,1.685,294,2.589,296,3.331,298,3.113,299,3.113,301,2.856,304,2.959,305,3.943,308,2.139,310,3.487,386,4.351,590,3.487,630,3.848,804,3.215,805,3.759,806,3.759,807,3.759,808,3.759,809,3.759,810,3.759,811,3.215,812,3.759,813,3.759,814,3.759]],["title/modules/ReplyModule.html",[50,1.087,67,2.263]],["body/modules/ReplyModule.html",[2,2.397,3,0.158,4,0.184,5,0.158,13,0.021,25,0.321,29,0.595,36,0.184,37,0.231,47,0.011,48,0.015,49,0.011,50,1.809,52,1.723,53,1.723,54,1.944,55,1.944,56,1.723,57,2.843,58,1.944,67,4.403,69,2.548,70,1.944,71,1.944,73,2.218,78,2.383,79,1.627,218,2.016,219,2.218,221,1.806,222,1.829,296,2.907,308,2.259,316,3.427,644,2.849,651,3.489,766,4.107,788,3.1,811,3.489,815,4.08,816,4.08,817,4.08,818,3.489,819,4.08,820,3.682,821,4.08,822,3.489]],["title/classes/ReplyResolver.html",[37,0.203,820,2.467]],["body/classes/ReplyResolver.html",[3,0.113,4,0.132,5,0.113,7,0.233,8,0.933,10,2.303,12,1.418,13,0.021,14,0.599,16,1.206,17,1.058,21,1.353,22,1.212,23,1.146,25,0.283,26,1.485,29,0.426,36,0.132,37,0.166,38,1.434,39,1.6,40,1.288,41,1.141,47,0.008,48,0.012,49,0.008,93,1.393,100,1.707,149,0.564,152,2.293,156,1.434,162,1.756,163,2.068,171,1.622,177,0.716,180,1.589,238,3.158,243,3.442,245,1.846,246,2.541,247,1.707,294,2.318,300,3.169,316,3.188,331,3.225,336,1.589,337,2.012,338,2.921,339,2.012,340,2.012,346,2.923,348,2.22,349,2.788,386,3.225,644,2.568,768,4.276,769,3.225,773,2.499,774,2.48,777,3.225,778,2.22,788,2.22,789,2.22,797,2.499,799,2.499,801,2.499,820,2.923,822,2.499,823,2.499,824,2.922,825,2.922,826,2.922,827,2.922,828,2.922,829,2.922,830,2.922,831,2.922,832,2.922,833,2.922,834,2.922,835,2.922,836,2.922,837,2.922]],["title/injectables/ReplyService.html",[103,0.745,644,1.513]],["body/injectables/ReplyService.html",[3,0.083,4,0.096,5,0.083,7,0.171,8,0.737,10,2.23,13,0.021,14,0.58,16,1.185,17,1.07,21,1.309,22,1.173,23,1.109,25,0.254,27,2.688,29,0.312,36,0.096,37,0.121,38,1.132,39,2.034,40,1.254,41,1.122,47,0.006,48,0.009,49,0.006,79,0.853,103,0.697,104,0.853,126,1.823,149,0.58,152,1.67,156,1.581,162,1.869,163,2.263,171,1.509,202,0.903,218,0.806,219,1.163,221,0.722,222,0.958,260,2.308,264,3.88,265,3.142,270,2.547,274,1.959,275,1.351,277,1.351,279,1.625,281,2.957,283,2.971,284,2.279,285,1.472,286,2.308,287,2.308,298,2.764,300,3.175,308,1.978,349,3.122,354,2.547,356,2.867,357,2.308,359,2.867,360,2.847,370,2.783,371,2.418,373,1.959,374,3.714,375,2.867,380,1.829,381,1.472,382,2.547,384,1.829,388,2.308,389,3.223,390,2.308,393,2.867,394,1.472,395,1.472,400,1.625,621,1.959,644,1.416,743,1.829,764,2.547,769,2.547,774,2.735,777,3.557,778,2.547,789,1.625,818,1.829,838,1.829,839,3.353,840,2.139,841,2.139,842,3.353,843,2.139,844,2.139,845,2.139,846,3.353,847,2.139,848,2.139,849,3.353,850,2.139,851,2.139,852,2.139,853,3.353,854,3.353,855,5.085,856,2.139,857,2.139,858,3.353,859,2.867,860,2.139,861,2.139]],["title/controllers/UserController.html",[0,1.707,862,2.467]],["body/controllers/UserController.html",[0,2.595,2,1.88,3,0.162,4,0.189,5,0.162,7,0.335,8,1.197,12,1.407,13,0.021,14,0.559,16,1.197,21,1.264,22,1.132,23,1.07,25,0.289,26,2.132,27,1.999,28,2.132,29,0.612,36,0.189,37,0.238,40,1.273,41,1.132,47,0.012,48,0.015,49,0.012,124,3.749,146,3.072,149,0.559,154,2.132,156,1.839,161,2.65,246,2.132,343,2.65,370,2.595,371,2.71,581,3.187,862,3.749,863,3.588,864,5.446,865,3.588,866,3.738,867,5.446,868,4.195,869,4.195,870,5.446,871,4.195,872,3.187,873,3.749,874,3.187,875,4.195,876,3.588,877,4.195,878,4.195]],["title/classes/UserEntity.html",[37,0.203,221,1.21]],["body/classes/UserEntity.html",[3,0.097,4,0.114,5,0.097,7,0.201,8,0.836,10,1.946,12,1.592,13,0.021,14,0.66,16,1.007,17,1.013,21,0.883,22,0.791,23,0.748,25,0.26,27,1.201,36,0.114,37,0.216,39,0.95,41,0.953,47,0.007,48,0.011,49,0.007,125,1.592,126,1.37,141,2.155,142,2.155,149,0.679,162,1.467,163,1.434,170,2.851,171,1.546,177,0.617,179,1.357,188,1.735,189,1.592,191,2.403,197,1.592,198,1.472,199,3.224,201,1.735,202,1.064,207,1.735,218,2.255,219,1.37,221,1.285,228,2.894,299,2.979,304,2.222,305,3.155,310,2.619,357,2.619,373,1.472,481,2.619,501,2.677,590,4.24,629,2.155,630,2.89,631,2.155,636,2.155,640,2.155,669,3.482,693,2.677,702,1.735,754,3.155,873,1.735,879,2.155,880,3.773,881,3.804,882,5.105,883,2.52,884,2.52,885,4.583,886,5.762,887,5.105,888,2.52,889,2.52,890,3.804,891,2.52,892,2.52,893,2.52,894,2.52,895,3.804,896,2.52,897,2.52,898,4.583,899,2.52,900,3.804,901,2.52,902,3.804,903,2.52,904,3.804,905,2.155,906,2.52,907,2.155,908,2.155,909,2.52,910,2.52,911,3.804,912,2.52,913,2.52,914,3.804,915,2.52,916,3.804,917,2.52,918,3.804,919,2.52,920,2.52,921,2.52,922,2.155]],["title/classes/UserLoginDTO.html",[37,0.203,154,1.82]],["body/classes/UserLoginDTO.html",[3,0.186,4,0.218,5,0.186,7,0.385,12,1.537,13,0.02,14,0.611,17,1.045,25,0.218,36,0.218,37,0.337,47,0.013,48,0.017,49,0.013,149,0.611,154,3.022,170,3.074,177,1.181,179,2.121,181,3.475,184,2.622,501,3.768,701,4.073,923,4.124,924,4.124,925,4.823,926,4.124,927,4.823,928,5.515,929,5.086]],["title/modules/UserModule.html",[50,1.087,68,2.093]],["body/modules/UserModule.html",[2,2.334,3,0.151,4,0.177,5,0.151,13,0.021,25,0.319,29,0.571,36,0.177,37,0.222,47,0.011,48,0.015,49,0.011,50,1.774,52,1.655,53,1.655,54,1.867,55,1.867,56,1.655,57,2.787,58,2.787,68,4.087,69,2.481,70,1.867,71,1.867,73,2.13,78,2.289,79,1.562,84,4.452,85,2.977,101,2.977,102,3.351,146,3.644,218,1.962,219,2.13,221,1.323,308,2.199,311,2.289,644,2.817,650,2.698,862,4.026,872,2.977,930,3.351,931,3.351,932,3.351,933,3.918,934,5.207,935,3.918,936,3.351,937,3.585,938,3.918,939,3.918]],["title/classes/UserRegisterDTO.html",[37,0.203,866,2.093]],["body/classes/UserRegisterDTO.html",[3,0.178,4,0.207,5,0.178,7,0.367,12,1.631,13,0.021,14,0.649,17,1.081,25,0.207,36,0.207,37,0.327,47,0.013,48,0.016,49,0.013,149,0.649,170,3.008,177,1.126,179,2.059,181,3.688,184,2.5,501,3.688,701,4.181,866,3.373,880,4.346,924,3.932,926,3.932,928,5.662,929,4.938,940,3.932,941,4.598,942,4.598,943,4.598,944,4.598]],["title/classes/UserResolver.html",[37,0.203,937,2.467]],["body/classes/UserResolver.html",[3,0.099,4,0.116,5,0.099,7,0.204,8,0.847,10,2.355,11,2.924,12,1.499,13,0.021,14,0.618,16,1.274,17,1.083,21,1.396,22,1.251,23,1.183,25,0.279,26,1.303,29,0.374,36,0.116,37,0.145,38,1.302,39,1.453,40,1.169,41,1.206,47,0.007,48,0.011,49,0.007,93,1.222,100,1.498,124,3.188,145,2.192,146,2.947,149,0.567,152,2.301,154,1.958,161,1.619,162,1.648,163,2.186,170,3.018,171,0.663,177,0.628,180,1.394,238,3.487,243,3.188,245,1.619,246,2.617,247,1.498,336,1.394,337,1.765,338,1.498,339,1.765,340,1.765,346,1.765,370,1.837,371,2.075,501,3.616,621,2.251,644,2.541,650,1.765,688,2.192,866,2.251,872,1.948,873,2.653,874,1.948,876,2.192,880,3.545,937,2.653,945,2.192,946,3.296,947,3.854,948,2.564,949,2.564,950,2.564,951,2.564,952,2.564,953,2.564,954,2.564,955,2.564,956,2.564,957,2.564,958,3.854,959,2.564,960,2.564,961,2.564,962,2.564,963,2.564,964,2.564,965,2.564,966,3.854,967,2.564,968,3.854,969,3.854,970,2.564,971,2.564,972,2.564,973,2.564]],["title/classes/UserResponseDTO.html",[37,0.203,693,2.093]],["body/classes/UserResponseDTO.html",[3,0.169,4,0.198,5,0.169,7,0.349,13,0.02,14,0.706,17,1.099,23,1.279,25,0.198,36,0.198,37,0.248,47,0.012,48,0.016,49,0.012,149,0.706,170,2.941,171,1.595,177,1.073,179,1.997,218,2.326,299,3.355,304,3.271,481,4.249,692,3.328,693,3.271,694,3.747,695,3.747,696,3.747,697,3.747,698,3.747,700,3.747,701,4.414,754,4.249,880,4.249,974,4.381]],["title/injectables/UserService.html",[103,0.745,146,1.82]],["body/injectables/UserService.html",[3,0.107,4,0.125,5,0.107,7,0.221,8,0.898,10,2.279,11,2.581,13,0.021,14,0.586,16,1.176,17,0.753,21,1.325,22,1.187,23,1.122,25,0.278,29,0.405,36,0.125,37,0.157,38,1.38,39,1.046,40,0.842,41,1.113,47,0.008,48,0.011,49,0.008,79,1.106,103,0.85,104,1.106,124,2.814,126,1.508,146,2.077,149,0.586,152,2.202,154,2.72,156,1.808,157,3.771,161,1.752,162,1.827,163,2.327,170,2.845,198,1.621,202,1.172,221,0.937,228,2.581,261,3.105,264,3.381,274,2.388,275,1.752,277,1.752,281,2.581,283,2.835,284,2.175,360,2.814,370,1.948,371,2.175,373,1.621,374,3.341,381,1.91,388,1.91,389,2.814,390,1.91,394,3.341,395,2.814,501,1.621,693,1.621,702,1.91,718,3.495,754,2.814,761,2.373,764,3.105,765,3.495,859,2.373,865,3.495,866,3.128,873,3.341,874,2.108,936,2.373,946,2.373,975,2.373,976,4.087,977,2.775,978,2.775,979,4.087,980,2.775,981,4.087,982,2.775,983,2.775,984,2.775,985,2.775,986,2.775,987,4.087,988,2.775,989,2.775,990,2.775,991,2.775,992,2.775,993,2.775,994,2.775]],["title/coverage.html",[995,3.724]],["body/coverage.html",[0,2.625,1,2.028,5,0.114,6,2.519,13,0.021,30,1.721,34,1.601,37,0.407,47,0.008,48,0.012,49,0.008,56,1.244,75,1.721,86,2.028,89,2.028,103,1.404,105,2.519,113,1.86,114,1.86,121,2.028,143,2.519,146,1.497,149,0.303,152,1.051,154,1.497,176,1.86,178,2.519,185,1.497,186,2.519,211,1.721,212,1.32,215,2.028,218,1.11,221,0.995,224,2.519,259,2.519,284,1.32,292,1.86,293,2.519,296,1.601,297,2.519,308,1.244,316,1.497,319,2.028,323,2.519,336,1.601,338,1.721,353,2.519,410,2.519,426,2.519,443,2.519,444,2.519,475,2.519,497,2.519,509,2.519,534,2.028,535,2.519,551,1.721,615,2.519,619,2.519,644,1.244,648,2.028,652,2.519,690,2.028,691,2.519,692,3.244,693,1.721,701,3.172,703,2.519,751,6.33,766,2.028,767,2.519,774,1.721,802,2.519,804,2.519,820,2.028,823,2.519,838,2.519,862,2.028,863,2.519,866,1.721,879,2.519,923,2.519,937,2.028,940,2.519,945,2.519,975,2.519,995,2.238,996,2.946,997,2.946,998,2.946,999,5.847,1000,5.847,1001,5.023,1002,2.519,1003,4.295,1004,4.27,1005,4.27,1006,2.519,1007,2.519,1008,2.946,1009,2.946,1010,4.27,1011,4.27,1012,4.27,1013,5.023,1014,5.847,1015,5.508,1016,2.519,1017,2.946,1018,4.27,1019,5.023,1020,2.946,1021,2.946,1022,2.519,1023,2.946,1024,2.946]],["title/dependencies.html",[53,1.821,1025,2.986]],["body/dependencies.html",[13,0.021,29,0.619,33,2.156,37,0.311,47,0.012,48,0.015,49,0.012,53,1.792,79,1.692,85,3.224,93,2.022,99,3.777,120,3.224,125,2.68,128,4.425,184,2.307,202,1.792,419,3.629,481,2.921,504,3.629,517,3.629,905,3.629,907,3.629,908,3.629,1026,6.079,1027,5.486,1028,4.243,1029,4.243,1030,4.243,1031,4.243,1032,4.243,1033,5.486,1034,4.243,1035,4.243,1036,4.243,1037,4.243,1038,4.243,1039,4.243,1040,4.243,1041,4.243,1042,4.243,1043,4.243,1044,4.243,1045,4.243,1046,4.243,1047,4.243,1048,4.243,1049,4.243,1050,4.243,1051,4.243,1052,4.243,1053,4.243,1054,4.243,1055,4.243,1056,4.243,1057,4.243,1058,4.243,1059,4.243,1060,4.243,1061,3.629,1062,4.243,1063,4.243,1064,4.243]],["title/miscellaneous/functions.html",[1065,2.056,1066,3.688]],["body/miscellaneous/functions.html",[7,0.45,13,0.018,47,0.016,48,0.018,49,0.016,56,2.914,1016,4.831,1065,3.889,1066,4.831,1067,5.649]],["title/index.html",[7,0.238,1068,2.986,1069,2.986]],["body/index.html",[13,0.021,47,0.013,48,0.016,49,0.013,284,2.074,427,3.957,995,3.515,1070,6.636,1071,4.627,1072,4.627,1073,4.627,1074,7.074,1075,4.627,1076,4.627,1077,4.627,1078,6.972,1079,4.627,1080,4.627,1081,5.797,1082,4.627,1083,4.627,1084,4.627,1085,4.627,1086,5.797,1087,5.797,1088,4.627,1089,4.627,1090,4.627,1091,4.627,1092,4.627,1093,4.627,1094,4.627,1095,4.627,1096,4.627,1097,4.627,1098,4.627,1099,4.627,1100,4.627,1101,4.627]],["title/modules.html",[52,2.07]],["body/modules.html",[13,0.017,47,0.014,48,0.017,49,0.014,51,3.455,52,2.12,62,3.17,63,3.17,64,3.17,65,3.17,66,3.17,67,3.17,68,2.932,1102,7.262,1103,7.262,1104,7.262,1105,7.262]],["title/overview.html",[1106,4.192]],["body/overview.html",[2,1.555,13,0.021,30,3.209,34,3.584,47,0.01,48,0.013,49,0.01,50,1.052,51,4.998,52,1.465,53,1.465,54,1.653,55,1.653,56,1.465,57,1.653,58,1.653,59,2.967,60,2.967,61,2.967,62,4.442,63,4.164,64,3.928,65,3.743,66,4.164,67,4.164,68,3.985,69,2.285,70,1.653,71,1.653,75,3.462,104,1.383,109,2.967,111,2.967,112,2.967,113,3.47,114,3.47,146,3.35,177,0.85,209,2.967,210,2.967,211,3.209,212,2.656,314,2.967,315,2.967,316,3.011,402,2.967,403,2.967,642,2.967,643,2.967,644,2.627,930,2.967,931,2.967,932,2.967,1106,2.967,1107,3.469,1108,3.469,1109,3.469,1110,3.469]],["title/miscellaneous/variables.html",[1065,2.056,1111,3.688]],["body/miscellaneous/variables.html",[3,0.175,7,0.361,13,0.021,28,2.301,41,0.941,47,0.013,48,0.016,49,0.013,99,3.118,121,3.937,126,3.407,129,3.872,138,4.89,149,0.465,152,2.235,156,1.931,247,2.645,338,3.341,373,3.662,429,3.44,440,3.118,482,3.44,922,3.872,1002,3.872,1003,3.872,1006,3.872,1007,5.36,1022,3.872,1061,3.872,1065,3.118,1111,4.89,1112,4.528,1113,4.528,1114,4.528,1115,4.528,1116,4.528,1117,4.528,1118,4.528,1119,4.528,1120,4.528,1121,5.719,1122,4.528,1123,5.719,1124,4.528,1125,4.528,1126,4.528,1127,4.528,1128,4.528,1129,4.528]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":751,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["0.2.20",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1018,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1020,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1019,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":374,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["1.0.0",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["1.3.1",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":913,"title":{},"body":{"classes/UserEntity.html":{}}}],["100",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1109,"title":{},"body":{"overview.html":{}}}],["14.5.8",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"classes/UserEntity.html":{}}}],["2.4.3",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["2.9.7",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1110,"title":{},"body":{"overview.html":{}}}],["25",{"_index":389,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["3.0.0",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1108,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["4.0.6",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["417920007",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["5.7.7",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["6.1.2",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["7.12.1",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1107,"title":{},"body":{"overview.html":{}}}],["8.2.0",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessed",{"_index":484,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["add",{"_index":430,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["already",{"_index":992,"title":{},"body":{"injectables/UserService.html":{}}}],["another",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apis",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apollo",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":1076,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":51,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":30,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":247,"title":{},"body":{"classes/CategoryResolver.html":{},"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{},"miscellaneous/variables.html":{}}}],["args('caption",{"_index":681,"title":{},"body":{"classes/PostResolver.html":{}}}],["args('category",{"_index":682,"title":{},"body":{"classes/PostResolver.html":{}}}],["args('comment",{"_index":348,"title":{},"body":{"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{}}}],["args('email",{"_index":968,"title":{},"body":{"classes/UserResolver.html":{}}}],["args('id",{"_index":683,"title":{},"body":{"classes/PostResolver.html":{}}}],["args('name",{"_index":254,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["args('newest",{"_index":679,"title":{},"body":{"classes/PostResolver.html":{}}}],["args('parent",{"_index":255,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["args('password",{"_index":969,"title":{},"body":{"classes/UserResolver.html":{}}}],["args('post",{"_index":834,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["args('reply",{"_index":347,"title":{},"body":{"classes/CommentResolver.html":{}}}],["args('username",{"_index":971,"title":{},"body":{"classes/UserResolver.html":{}}}],["argumentshost",{"_index":450,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["async",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["attached",{"_index":483,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["attempt",{"_index":897,"title":{},"body":{"classes/UserEntity.html":{}}}],["auth",{"_index":485,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.service",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/current",{"_index":339,"title":{},"body":{"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["auth/gql.guard",{"_index":337,"title":{},"body":{"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["authentication",{"_index":431,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/GqlAuthGuard.html":{},"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["authguard('jwt",{"_index":439,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":62,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":298,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/CommentService.html":{},"classes/PostEntity.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"classes/ReplyEntity.html":{},"injectables/ReplyService.html":{}}}],["author.posts",{"_index":639,"title":{},"body":{"classes/PostEntity.html":{}}}],["authservice",{"_index":34,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["await",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["babel/types",{"_index":730,"title":{},"body":{"injectables/PostService.html":{}}}],["backend",{"_index":1072,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":906,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcrypt.compare(attempt",{"_index":920,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcrypt.hash(this.password",{"_index":912,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcryptjs",{"_index":907,"title":{},"body":{"classes/UserEntity.html":{},"dependencies.html":{}}}],["beforeinsert",{"_index":898,"title":{},"body":{"classes/UserEntity.html":{}}}],["beforeupdate",{"_index":903,"title":{},"body":{"classes/UserEntity.html":{}}}],["body",{"_index":581,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{},"controllers/UserController.html":{}}}],["bookmark",{"_index":653,"title":{},"body":{"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["bookmark(@args('id",{"_index":686,"title":{},"body":{"classes/PostResolver.html":{}}}],["bookmark(id",{"_index":657,"title":{},"body":{"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["bookmark.id",{"_index":756,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarked",{"_index":763,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarkpost",{"_index":537,"title":{},"body":{"controllers/PostController.html":{}}}],["bookmarkpost(@param('id",{"_index":610,"title":{},"body":{"controllers/PostController.html":{}}}],["bookmarkpost(id",{"_index":547,"title":{},"body":{"controllers/PostController.html":{}}}],["bookmarks",{"_index":754,"title":{},"body":{"injectables/PostService.html":{},"classes/UserEntity.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["boolean",{"_index":669,"title":{},"body":{"classes/PostResolver.html":{},"injectables/PostService.html":{},"classes/UserEntity.html":{}}}],["bootstrap",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1105,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1102,"title":{},"body":{"modules.html":{}}}],["callhandler",{"_index":513,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["canactivate",{"_index":436,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["caption",{"_index":616,"title":{},"body":{"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{}}}],["cas",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["cascade",{"_index":630,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["catch",{"_index":447,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["catch(exception",{"_index":448,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["catch(httpexception",{"_index":454,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["categories",{"_index":225,"title":{},"body":{"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{}}}],["category",{"_index":205,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/PostEntity.html":{},"injectables/PostService.html":{}}}],["category(@args('id",{"_index":251,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["category(id",{"_index":233,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["category.children",{"_index":206,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["category.dto",{"_index":248,"title":{},"body":{"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{}}}],["category.entity",{"_index":217,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["category.parent",{"_index":208,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["category.resolver",{"_index":216,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.service",{"_index":214,"title":{},"body":{"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{}}}],["category/category.entity",{"_index":637,"title":{},"body":{"classes/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["category/category.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["categorydto",{"_index":176,"title":{"classes/CategoryDTO.html":{}},"body":{"classes/CategoryDTO.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"coverage.html":{}}}],["categoryentity",{"_index":185,"title":{"classes/CategoryEntity.html":{}},"body":{"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["categoryid",{"_index":552,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["categorymodule",{"_index":63,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryrepository",{"_index":267,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PostService.html":{}}}],["categoryresolver",{"_index":215,"title":{"classes/CategoryResolver.html":{}},"body":{"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"coverage.html":{}}}],["categoryservice",{"_index":211,"title":{"injectables/CategoryService.html":{}},"body":{"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["change",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["children",{"_index":187,"title":{},"body":{"classes/CategoryEntity.html":{},"injectables/CategoryService.html":{}}}],["class",{"_index":37,"title":{"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"classes/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":177,"title":{},"body":{"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"classes/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":934,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_appmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":209,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":210,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_commentmodule",{"_index":314,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_commentmodule_providers",{"_index":315,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":402,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":403,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":642,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":643,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_replymodule",{"_index":815,"title":{},"body":{"modules/ReplyModule.html":{}}}],["cluster_replymodule_providers",{"_index":816,"title":{},"body":{"modules/ReplyModule.html":{}}}],["cluster_usermodule",{"_index":930,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":931,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":932,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":462,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["column",{"_index":199,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["column('text",{"_index":193,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{}}}],["column({type",{"_index":885,"title":{},"body":{"classes/UserEntity.html":{}}}],["comment",{"_index":294,"title":{},"body":{"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{}}}],["comment(@args('id",{"_index":344,"title":{},"body":{"classes/CommentResolver.html":{}}}],["comment(id",{"_index":328,"title":{},"body":{"classes/CommentResolver.html":{}}}],["comment.author",{"_index":383,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.author.id",{"_index":399,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.author.toresponseobject(false",{"_index":385,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.dto",{"_index":341,"title":{},"body":{"classes/CommentResolver.html":{},"injectables/CommentService.html":{}}}],["comment.entity",{"_index":321,"title":{},"body":{"modules/CommentModule.html":{},"injectables/CommentService.html":{}}}],["comment.reply",{"_index":814,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["comment.resolver",{"_index":320,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.service",{"_index":318,"title":{},"body":{"modules/CommentModule.html":{},"classes/CommentResolver.html":{}}}],["comment/comment.entity",{"_index":811,"title":{},"body":{"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{}}}],["comment/comment.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["comment/comment.service",{"_index":822,"title":{},"body":{"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{}}}],["commentdto",{"_index":292,"title":{"classes/CommentDTO.html":{}},"body":{"classes/CommentDTO.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"coverage.html":{}}}],["commententity",{"_index":296,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"coverage.html":{}}}],["commentid",{"_index":368,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentmodule",{"_index":64,"title":{"modules/CommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules.html":{},"overview.html":{}}}],["commentrepositorty",{"_index":362,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentresolver",{"_index":319,"title":{"classes/CommentResolver.html":{}},"body":{"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"coverage.html":{}}}],["comments",{"_index":386,"title":{},"body":{"injectables/CommentService.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{}}}],["comments(@parent",{"_index":836,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["comments(reply",{"_index":826,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["comments.map(comment",{"_index":391,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentservice",{"_index":316,"title":{"injectables/CommentService.html":{}},"body":{"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"coverage.html":{},"overview.html":{}}}],["comparepassword",{"_index":881,"title":{},"body":{"classes/UserEntity.html":{}}}],["comparepassword(attempt",{"_index":895,"title":{},"body":{"classes/UserEntity.html":{}}}],["compodoc",{"_index":1092,"title":{},"body":{"index.html":{}}}],["config.service",{"_index":406,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["config/config.service",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":65,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":75,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"coverage.html":{},"overview.html":{}}}],["console.log('filepath",{"_index":421,"title":{},"body":{"classes/ConfigService.html":{}}}],["console.log(typeof",{"_index":422,"title":{},"body":{"classes/ConfigService.html":{}}}],["const",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constants",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":498,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryrepository",{"_index":263,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(categoryservice",{"_index":229,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["constructor(commentrepositorty",{"_index":358,"title":{},"body":{"injectables/CommentService.html":{}}}],["constructor(commentservice",{"_index":326,"title":{},"body":{"classes/CommentResolver.html":{}}}],["constructor(filepath",{"_index":412,"title":{},"body":{"classes/ConfigService.html":{}}}],["constructor(postrepository",{"_index":707,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(postservice",{"_index":655,"title":{},"body":{"classes/PostResolver.html":{}}}],["constructor(private",{"_index":343,"title":{},"body":{"classes/CommentResolver.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"controllers/ReplyController.html":{},"controllers/UserController.html":{}}}],["constructor(replyrepository",{"_index":840,"title":{},"body":{"injectables/ReplyService.html":{}}}],["constructor(replyservice",{"_index":824,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["constructor(userrepository",{"_index":977,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{}}}],["context",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["context.getclass().name",{"_index":533,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":521,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/PostController.html":{},"controllers/ReplyController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/PostController.html":{},"controllers/ReplyController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('post",{"_index":586,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('reply",{"_index":790,"title":{},"body":{"controllers/ReplyController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/ReplyController.html":{},"modules/ReplyModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":995,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":354,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["create(postid",{"_index":842,"title":{},"body":{"injectables/ReplyService.html":{}}}],["create(replyid",{"_index":363,"title":{},"body":{"injectables/CommentService.html":{}}}],["create(userid",{"_index":710,"title":{},"body":{"injectables/PostService.html":{}}}],["createcategory",{"_index":226,"title":{},"body":{"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{}}}],["createcategory(data",{"_index":268,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategory(name",{"_index":236,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["createcomment",{"_index":324,"title":{},"body":{"classes/CommentResolver.html":{}}}],["createcomment(replyid",{"_index":330,"title":{},"body":{"classes/CommentResolver.html":{}}}],["created",{"_index":299,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{},"classes/UserResponseDTO.html":{}}}],["createdatecolumn",{"_index":305,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["createparamdecorator",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparamdecorator((data",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":538,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["createpost(caption",{"_index":659,"title":{},"body":{"classes/PostResolver.html":{}}}],["createpost(userid",{"_index":550,"title":{},"body":{"controllers/PostController.html":{}}}],["createreply",{"_index":768,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{}}}],["createreply(postid",{"_index":773,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{}}}],["ctx",{"_index":440,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["ctx.getcontext().name",{"_index":531,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ctx.getcontext().req",{"_index":442,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["ctx.getinfo",{"_index":525,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ctx.getrequest",{"_index":456,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.getresponse",{"_index":458,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.req.user",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentuser",{"_index":338,"title":{},"body":{"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["data.name",{"_index":290,"title":{},"body":{"injectables/CategoryService.html":{}}}],["data.parent",{"_index":288,"title":{},"body":{"injectables/CategoryService.html":{}}}],["date",{"_index":304,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/PostResponseDTO.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{},"classes/UserResponseDTO.html":{}}}],["date().tolocaledatestring",{"_index":464,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["date.now",{"_index":523,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["declarations",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoding",{"_index":480,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorator",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{}}}],["default",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":580,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{}}}],["delete(':id",{"_index":601,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["delete(':id')@useguards(undefined",{"_index":556,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["delete(':id/bookmark",{"_index":612,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(':id/bookmark')@useguards(undefined",{"_index":570,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(':id/like",{"_index":607,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(':id/like')@useguards(undefined",{"_index":573,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(id",{"_index":712,"title":{},"body":{"injectables/PostService.html":{}}}],["deletecomment",{"_index":325,"title":{},"body":{"classes/CommentResolver.html":{},"injectables/CommentService.html":{}}}],["deletecomment(@args('id",{"_index":351,"title":{},"body":{"classes/CommentResolver.html":{}}}],["deletecomment(id",{"_index":334,"title":{},"body":{"classes/CommentResolver.html":{},"injectables/CommentService.html":{}}}],["deletepost",{"_index":539,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["deletepost(@args('id",{"_index":684,"title":{},"body":{"classes/PostResolver.html":{}}}],["deletepost(@param('id",{"_index":602,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":555,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["deletereply",{"_index":769,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{}}}],["deletereply(@args('id",{"_index":835,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["deletereply(@param('id",{"_index":800,"title":{},"body":{"controllers/ReplyController.html":{}}}],["deletereply(id",{"_index":778,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":738,"title":{},"body":{"injectables/PostService.html":{}}}],["description",{"_index":427,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"index.html":{}}}],["dev",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":1077,"title":{},"body":{"index.html":{}}}],["development'}.env",{"_index":409,"title":{},"body":{"modules/ConfigModule.html":{}}}],["documentation",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":419,"title":{},"body":{"classes/ConfigService.html":{},"dependencies.html":{}}}],["dotenv.parse(fs.readfilesync(filepath",{"_index":424,"title":{},"body":{"classes/ConfigService.html":{}}}],["dto/user",{"_index":873,"title":{},"body":{"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":1088,"title":{},"body":{"index.html":{}}}],["email",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["ensureownership",{"_index":704,"title":{},"body":{"injectables/PostService.html":{}}}],["ensureownership(post",{"_index":714,"title":{},"body":{"injectables/PostService.html":{}}}],["entity",{"_index":197,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["entity('category",{"_index":203,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["entity('comment",{"_index":312,"title":{},"body":{"classes/CommentEntity.html":{}}}],["entity('post",{"_index":638,"title":{},"body":{"classes/PostEntity.html":{}}}],["entity('reply",{"_index":812,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["entity('user",{"_index":909,"title":{},"body":{"classes/UserEntity.html":{}}}],["envconfig",{"_index":411,"title":{},"body":{"classes/ConfigService.html":{}}}],["environment",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.filter",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["error.filter.ts",{"_index":444,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:11",{"_index":451,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errorresponse",{"_index":461,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception",{"_index":452,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.getstatus",{"_index":460,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.message",{"_index":471,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.message.error",{"_index":470,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exceptionfilter",{"_index":446,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exclude",{"_index":904,"title":{},"body":{"classes/UserEntity.html":{}}}],["executioncontext",{"_index":434,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["exist",{"_index":859,"title":{},"body":{"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["exists",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["expiresin",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"classes/UserEntity.html":{}}}],["export",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":438,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":486,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filepath",{"_index":414,"title":{},"body":{"classes/ConfigService.html":{}}}],["firefly",{"_index":1071,"title":{},"body":{"index.html":{}}}],["forumcategories",{"_index":227,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["found",{"_index":286,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["fs",{"_index":420,"title":{},"body":{"classes/ConfigService.html":{}}}],["function",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1066,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/newest",{"_index":564,"title":{},"body":{"controllers/PostController.html":{}}}],["get(':id",{"_index":567,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["get('post/:id",{"_index":781,"title":{},"body":{"controllers/ReplyController.html":{}}}],["get('user/:id",{"_index":784,"title":{},"body":{"controllers/ReplyController.html":{}}}],["get('users",{"_index":870,"title":{},"body":{"controllers/UserController.html":{}}}],["get(key",{"_index":416,"title":{},"body":{"classes/ConfigService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrequest",{"_index":432,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":433,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":1068,"title":{"index.html":{}},"body":{}}],["global",{"_index":405,"title":{},"body":{"modules/ConfigModule.html":{}}}],["globally",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["google",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["gqlauthguard",{"_index":336,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"classes/CommentResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":437,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["gqlexecutioncontext.create(context",{"_index":441,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["graphql",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["graphqlexecutioncontext",{"_index":520,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["graphqlmodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["guard",{"_index":428,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["hashpassword",{"_index":882,"title":{},"body":{"classes/UserEntity.html":{}}}],["hello",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":449,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["host.switchtohttp",{"_index":455,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["httperrorfilter",{"_index":86,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":274,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["httpexception('idea",{"_index":762,"title":{},"body":{"injectables/PostService.html":{}}}],["httpexception('incorrect",{"_index":735,"title":{},"body":{"injectables/PostService.html":{}}}],["httpexception('not",{"_index":285,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["httpexception('post",{"_index":747,"title":{},"body":{"injectables/PostService.html":{}}}],["httpexception('reply",{"_index":858,"title":{},"body":{"injectables/ReplyService.html":{}}}],["httpexception('user",{"_index":395,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["https://github.com/nestjs/nest/issues/1031#issuecomment",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://yume.me",{"_index":1098,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":275,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_gateway",{"_index":991,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":764,"title":{},"body":{"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":287,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["httpstatus.unauthorized",{"_index":400,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["id",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{}}}],["identifier",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":445,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["import",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["info.fieldname",{"_index":529,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["info.parenttype",{"_index":528,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["inject",{"_index":728,"title":{},"body":{"injectables/PostService.html":{}}}],["injectable",{"_index":103,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":277,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["injectrepository(categoryentity",{"_index":278,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PostService.html":{}}}],["injectrepository(commententity",{"_index":379,"title":{},"body":{"injectables/CommentService.html":{}}}],["injectrepository(postentity",{"_index":279,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["injectrepository(replyentity",{"_index":380,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ReplyService.html":{}}}],["injectrepository(userentity",{"_index":381,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":1073,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1075,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":510,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":511,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["invalid",{"_index":989,"title":{},"body":{"injectables/UserService.html":{}}}],["isdeclaration",{"_index":729,"title":{},"body":{"injectables/PostService.html":{}}}],["isemail",{"_index":929,"title":{},"body":{"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{}}}],["isemail()@isnotempty",{"_index":924,"title":{},"body":{"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{}}}],["isnotempty",{"_index":928,"title":{},"body":{"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{}}}],["isnotempty()@isstring",{"_index":926,"title":{},"body":{"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{}}}],["isstring",{"_index":181,"title":{},"body":{"classes/CategoryDTO.html":{},"classes/CommentDTO.html":{},"classes/PostDTO.html":{},"classes/ReplyDTO.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{}}}],["isstring()@isnotempty",{"_index":943,"title":{},"body":{"classes/UserRegisterDTO.html":{}}}],["jointable",{"_index":310,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["json.stringify(errorresponse",{"_index":473,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["jsonwebtoken",{"_index":908,"title":{},"body":{"classes/UserEntity.html":{},"dependencies.html":{}}}],["jwt",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"dependencies.html":{}}}],["jwt.sign",{"_index":921,"title":{},"body":{"classes/UserEntity.html":{}}}],["jwt.strategy",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconstants",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":113,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":418,"title":{},"body":{"classes/ConfigService.html":{}}}],["legend",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":1099,"title":{},"body":{"index.html":{}}}],["like(@args('id",{"_index":685,"title":{},"body":{"classes/PostResolver.html":{}}}],["like(id",{"_index":662,"title":{},"body":{"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["likepost",{"_index":540,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(@param('id",{"_index":605,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(id",{"_index":558,"title":{},"body":{"controllers/PostController.html":{}}}],["liker.id",{"_index":749,"title":{},"body":{"injectables/PostService.html":{}}}],["likes",{"_index":620,"title":{},"body":{"classes/PostEntity.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{}}}],["llc",{"_index":1101,"title":{},"body":{"index.html":{}}}],["local",{"_index":504,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":114,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{}}}],["logger.error",{"_index":472,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["logger.log",{"_index":527,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logginginterceptor",{"_index":89,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["login(@request",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["login(data",{"_index":979,"title":{},"body":{"injectables/UserService.html":{}}}],["login(email",{"_index":949,"title":{},"body":{"classes/UserResolver.html":{}}}],["login(req",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["login(user",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.dto",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["login.dto.ts",{"_index":923,"title":{},"body":{"classes/UserLoginDTO.html":{},"coverage.html":{}}}],["login.dto.ts:10",{"_index":927,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["login.dto.ts:6",{"_index":925,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["manytomany",{"_index":636,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["manytomany(type",{"_index":640,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["manytomany(undefined",{"_index":629,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["manytoone",{"_index":200,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{}}}],["manytoone(type",{"_index":204,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{}}}],["manytoone(undefined",{"_index":195,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{}}}],["manytoone(undefined)@jointable",{"_index":301,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{}}}],["matching",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":469,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["metadata",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":467,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":1065,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1081,"title":{},"body":{"index.html":{}}}],["module",{"_index":50,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["mutation",{"_index":238,"title":{},"body":{"classes/CategoryResolver.html":{},"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["mutation()@useguards(gqlauthguard",{"_index":331,"title":{},"body":{"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{}}}],["name",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["nestinterceptor",{"_index":516,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"classes/CategoryResolver.html":{},"classes/CommentResolver.html":{},"injectables/GqlAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"controllers/ReplyController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/ReplyModule.html":{},"injectables/ReplyService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":284,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/HttpErrorFilter.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["newest",{"_index":668,"title":{},"body":{"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["next",{"_index":512,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle",{"_index":524,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now",{"_index":522,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":530,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":1074,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1091,"title":{},"body":{"index.html":{}}}],["null",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/HttpErrorFilter.html":{}}}],["number",{"_index":371,"title":{},"body":{"injectables/CommentService.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["object",{"_index":482,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":515,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["onetomany",{"_index":201,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["onetomany(type",{"_index":207,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["onetomany(undefined",{"_index":188,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["optional",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["order",{"_index":737,"title":{},"body":{"injectables/PostService.html":{}}}],["out",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1106,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1093,"title":{},"body":{"index.html":{}}}],["package",{"_index":1025,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":370,"title":{},"body":{"injectables/CommentService.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["param",{"_index":582,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["param('categoryid",{"_index":594,"title":{},"body":{"controllers/PostController.html":{}}}],["param('id",{"_index":599,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parent",{"_index":180,"title":{},"body":{"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["parentid",{"_index":237,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["partial",{"_index":576,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["passport",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":487,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":488,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":501,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["passwordfield",{"_index":507,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["path",{"_index":465,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["payload",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["post",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyEntity.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{}}}],["post(':categoryid",{"_index":591,"title":{},"body":{"controllers/PostController.html":{}}}],["post(':categoryid')@useguards(undefined",{"_index":553,"title":{},"body":{"controllers/PostController.html":{}}}],["post(':id/bookmark",{"_index":609,"title":{},"body":{"controllers/PostController.html":{}}}],["post(':id/bookmark')@useguards(undefined",{"_index":548,"title":{},"body":{"controllers/PostController.html":{}}}],["post(':id/like",{"_index":604,"title":{},"body":{"controllers/PostController.html":{}}}],["post(':id/like')@useguards(undefined",{"_index":559,"title":{},"body":{"controllers/PostController.html":{}}}],["post('auth/login",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["post('post/:id",{"_index":796,"title":{},"body":{"controllers/ReplyController.html":{}}}],["post('post/:id')@useguards(undefined",{"_index":775,"title":{},"body":{"controllers/ReplyController.html":{}}}],["post('register",{"_index":867,"title":{},"body":{"controllers/UserController.html":{}}}],["post(@args('id",{"_index":680,"title":{},"body":{"classes/PostResolver.html":{}}}],["post(id",{"_index":664,"title":{},"body":{"classes/PostResolver.html":{}}}],["post.author",{"_index":910,"title":{},"body":{"classes/UserEntity.html":{}}}],["post.author.id",{"_index":734,"title":{},"body":{"injectables/PostService.html":{}}}],["post.author.toresponseobject(false",{"_index":731,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":646,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":584,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["post.entity",{"_index":647,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.id",{"_index":760,"title":{},"body":{"injectables/PostService.html":{}}}],["post.id).length",{"_index":757,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likes",{"_index":752,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likes.filter(liker",{"_index":748,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likes.length",{"_index":733,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likes.push(user",{"_index":753,"title":{},"body":{"injectables/PostService.html":{}}}],["post.replies",{"_index":813,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["post.resolver",{"_index":649,"title":{},"body":{"modules/PostModule.html":{}}}],["post.service",{"_index":583,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{}}}],["post/post.entity",{"_index":219,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{}}}],["post/post.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["post/post.service",{"_index":220,"title":{},"body":{"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{}}}],["postcontroller",{"_index":534,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postdto",{"_index":551,"title":{"classes/PostDTO.html":{}},"body":{"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["postentity",{"_index":218,"title":{"classes/PostEntity.html":{}},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResponseDTO.html":{},"coverage.html":{}}}],["postid",{"_index":777,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{}}}],["postmodule",{"_index":66,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrepository",{"_index":265,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["postresolver",{"_index":648,"title":{"classes/PostResolver.html":{}},"body":{"modules/PostModule.html":{},"classes/PostResolver.html":{},"coverage.html":{}}}],["postresponsedto",{"_index":690,"title":{"classes/PostResponseDTO.html":{}},"body":{"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["posts",{"_index":228,"title":{},"body":{"classes/CategoryResolver.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["posts(@args('page",{"_index":678,"title":{},"body":{"classes/PostResolver.html":{}}}],["posts(@parent",{"_index":257,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["posts(category",{"_index":242,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["posts(page",{"_index":667,"title":{},"body":{"classes/PostResolver.html":{}}}],["posts.map(post",{"_index":739,"title":{},"body":{"injectables/PostService.html":{}}}],["postservice",{"_index":212,"title":{"injectables/PostService.html":{}},"body":{"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":536,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["primarygeneratedcolumn",{"_index":198,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":191,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":408,"title":{},"body":{"modules/ConfigModule.html":{}}}],["production",{"_index":1083,"title":{},"body":{"index.html":{}}}],["projectxy",{"_index":922,"title":{},"body":{"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":179,"title":{},"body":{"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/ConfigService.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResponseDTO.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResponseDTO.html":{}}}],["property",{"_index":1100,"title":{},"body":{"index.html":{}}}],["provide",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{}}}],["providers",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":579,"title":{},"body":{"controllers/PostController.html":{}}}],["put(':id",{"_index":598,"title":{},"body":{"controllers/PostController.html":{}}}],["put(':id')@useguards(undefined",{"_index":577,"title":{},"body":{"controllers/PostController.html":{}}}],["query",{"_index":246,"title":{},"body":{"classes/CategoryResolver.html":{},"classes/CommentResolver.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["query('categories",{"_index":231,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["query('category",{"_index":234,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["query('forumcategories",{"_index":240,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["query('page",{"_index":792,"title":{},"body":{"controllers/ReplyController.html":{}}}],["query('post",{"_index":665,"title":{},"body":{"classes/PostResolver.html":{}}}],["query('posts",{"_index":670,"title":{},"body":{"classes/PostResolver.html":{}}}],["query('users",{"_index":958,"title":{},"body":{"classes/UserResolver.html":{}}}],["query()@useguards(gqlauthguard",{"_index":961,"title":{},"body":{"classes/UserResolver.html":{}}}],["read",{"_index":976,"title":{},"body":{"injectables/UserService.html":{}}}],["read(email",{"_index":981,"title":{},"body":{"injectables/UserService.html":{}}}],["readonly",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["record",{"_index":415,"title":{},"body":{"classes/ConfigService.html":{}}}],["reflect",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["register(@body",{"_index":877,"title":{},"body":{"controllers/UserController.html":{}}}],["register(data",{"_index":865,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["register(email",{"_index":951,"title":{},"body":{"classes/UserResolver.html":{}}}],["register.dto",{"_index":874,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["register.dto.ts",{"_index":940,"title":{},"body":{"classes/UserRegisterDTO.html":{},"coverage.html":{}}}],["register.dto.ts:10",{"_index":942,"title":{},"body":{"classes/UserRegisterDTO.html":{}}}],["register.dto.ts:14",{"_index":941,"title":{},"body":{"classes/UserRegisterDTO.html":{}}}],["register.dto.ts:6",{"_index":944,"title":{},"body":{"classes/UserRegisterDTO.html":{}}}],["relations",{"_index":281,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["replies",{"_index":621,"title":{},"body":{"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"classes/UserResolver.html":{}}}],["replies(@parent",{"_index":688,"title":{},"body":{"classes/PostResolver.html":{},"classes/UserResolver.html":{}}}],["replies(post",{"_index":672,"title":{},"body":{"classes/PostResolver.html":{}}}],["replies(user",{"_index":953,"title":{},"body":{"classes/UserResolver.html":{}}}],["replies.map(reply",{"_index":854,"title":{},"body":{"injectables/ReplyService.html":{}}}],["reply",{"_index":300,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/CommentService.html":{},"classes/PostEntity.html":{},"classes/PostResponseDTO.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{}}}],["reply(@args('id",{"_index":833,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["reply(id",{"_index":830,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["reply.author",{"_index":851,"title":{},"body":{"injectables/ReplyService.html":{}}}],["reply.author.id",{"_index":860,"title":{},"body":{"injectables/ReplyService.html":{}}}],["reply.author.toresponseobject(false",{"_index":852,"title":{},"body":{"injectables/ReplyService.html":{}}}],["reply.comments",{"_index":313,"title":{},"body":{"classes/CommentEntity.html":{}}}],["reply.controller",{"_index":819,"title":{},"body":{"modules/ReplyModule.html":{}}}],["reply.dto",{"_index":789,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{}}}],["reply.entity",{"_index":818,"title":{},"body":{"modules/ReplyModule.html":{},"injectables/ReplyService.html":{}}}],["reply.post",{"_index":641,"title":{},"body":{"classes/PostEntity.html":{}}}],["reply.resolver",{"_index":821,"title":{},"body":{"modules/ReplyModule.html":{}}}],["reply.service",{"_index":788,"title":{},"body":{"controllers/ReplyController.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{}}}],["reply/reply.entity",{"_index":311,"title":{},"body":{"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["reply/reply.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["reply/reply.service",{"_index":650,"title":{},"body":{"modules/PostModule.html":{},"classes/PostResolver.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{}}}],["replycontroller",{"_index":766,"title":{"controllers/ReplyController.html":{}},"body":{"controllers/ReplyController.html":{},"modules/ReplyModule.html":{},"coverage.html":{}}}],["replydto",{"_index":774,"title":{"classes/ReplyDTO.html":{}},"body":{"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"coverage.html":{}}}],["replyentity",{"_index":308,"title":{"classes/ReplyEntity.html":{}},"body":{"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"injectables/ReplyService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["replyid",{"_index":333,"title":{},"body":{"classes/CommentResolver.html":{},"injectables/CommentService.html":{}}}],["replymodule",{"_index":67,"title":{"modules/ReplyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReplyModule.html":{},"modules.html":{},"overview.html":{}}}],["replyrepository",{"_index":359,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ReplyService.html":{}}}],["replyresolver",{"_index":820,"title":{"classes/ReplyResolver.html":{}},"body":{"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"coverage.html":{}}}],["replyservice",{"_index":644,"title":{"injectables/ReplyService.html":{}},"body":{"modules/PostModule.html":{},"classes/PostResolver.html":{},"controllers/ReplyController.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"coverage.html":{},"overview.html":{}}}],["repository",{"_index":264,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["request",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.method",{"_index":468,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request.url",{"_index":466,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request.user",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolveproperty",{"_index":243,"title":{},"body":{"classes/CategoryResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["resolver",{"_index":245,"title":{},"body":{"classes/CategoryResolver.html":{},"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('category",{"_index":249,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["resolver('comment",{"_index":342,"title":{},"body":{"classes/CommentResolver.html":{}}}],["resolver('post",{"_index":677,"title":{},"body":{"classes/PostResolver.html":{}}}],["resolver('reply",{"_index":832,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["resolver('user",{"_index":963,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvers",{"_index":429,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":457,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["response.dto",{"_index":702,"title":{},"body":{"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["response.dto.ts",{"_index":692,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserResponseDTO.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":699,"title":{},"body":{"classes/PostResponseDTO.html":{}}}],["response.dto.ts:4",{"_index":698,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserResponseDTO.html":{}}}],["response.dto.ts:5",{"_index":700,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserResponseDTO.html":{}}}],["response.dto.ts:6",{"_index":697,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserResponseDTO.html":{}}}],["response.dto.ts:7",{"_index":695,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserResponseDTO.html":{}}}],["response.dto.ts:8",{"_index":696,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserResponseDTO.html":{}}}],["response.dto.ts:9",{"_index":694,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserResponseDTO.html":{}}}],["response.pipe",{"_index":526,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["response.status(status).json(errorresponse",{"_index":474,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["responseobj",{"_index":914,"title":{},"body":{"classes/UserEntity.html":{}}}],["responseobj.bookmarks",{"_index":919,"title":{},"body":{"classes/UserEntity.html":{}}}],["responseobj.posts",{"_index":917,"title":{},"body":{"classes/UserEntity.html":{}}}],["responseobj.token",{"_index":915,"title":{},"body":{"classes/UserEntity.html":{}}}],["responseobject",{"_index":382,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["responseobject.author",{"_index":384,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ReplyService.html":{}}}],["responseobject.likes",{"_index":732,"title":{},"body":{"injectables/PostService.html":{}}}],["rest",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":1061,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1078,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":517,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":519,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["secret",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":890,"title":{},"body":{"classes/UserEntity.html":{}}}],["sent",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["shared/http",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/logging.interceptor",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["show",{"_index":260,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["show(commentid",{"_index":366,"title":{},"body":{"injectables/CommentService.html":{}}}],["show(id",{"_index":270,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["showall",{"_index":261,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["showall(page",{"_index":718,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["showallposts",{"_index":541,"title":{},"body":{"controllers/PostController.html":{}}}],["showallposts(@query('page",{"_index":587,"title":{},"body":{"controllers/PostController.html":{}}}],["showallposts(page",{"_index":561,"title":{},"body":{"controllers/PostController.html":{}}}],["showallusers",{"_index":864,"title":{},"body":{"controllers/UserController.html":{}}}],["showallusers(@query('page",{"_index":875,"title":{},"body":{"controllers/UserController.html":{}}}],["showallusers(page",{"_index":869,"title":{},"body":{"controllers/UserController.html":{}}}],["showbycategory",{"_index":705,"title":{},"body":{"injectables/PostService.html":{}}}],["showbycategory(categoryid",{"_index":721,"title":{},"body":{"injectables/PostService.html":{}}}],["showbypost",{"_index":839,"title":{},"body":{"injectables/ReplyService.html":{}}}],["showbypost(postid",{"_index":846,"title":{},"body":{"injectables/ReplyService.html":{}}}],["showbyreply",{"_index":355,"title":{},"body":{"injectables/CommentService.html":{}}}],["showbyreply(replyid",{"_index":369,"title":{},"body":{"injectables/CommentService.html":{}}}],["showbyuser",{"_index":356,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ReplyService.html":{}}}],["showbyuser(userid",{"_index":375,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ReplyService.html":{}}}],["showforumcategory",{"_index":262,"title":{},"body":{"injectables/CategoryService.html":{}}}],["shownewestposts",{"_index":542,"title":{},"body":{"controllers/PostController.html":{}}}],["shownewestposts(@query('page",{"_index":589,"title":{},"body":{"controllers/PostController.html":{}}}],["shownewestposts(page",{"_index":563,"title":{},"body":{"controllers/PostController.html":{}}}],["showpost",{"_index":543,"title":{},"body":{"controllers/PostController.html":{}}}],["showpost(@param('id",{"_index":596,"title":{},"body":{"controllers/PostController.html":{}}}],["showpost(id",{"_index":566,"title":{},"body":{"controllers/PostController.html":{}}}],["showrepliesbypost",{"_index":770,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showrepliesbypost(@param('id",{"_index":791,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showrepliesbypost(postid",{"_index":780,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showrepliesbyuser",{"_index":771,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showrepliesbyuser(@param('id",{"_index":794,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showrepliesbyuser(userid",{"_index":783,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showreply",{"_index":772,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showreply(@param('id",{"_index":798,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showreply(id",{"_index":786,"title":{},"body":{"controllers/ReplyController.html":{}}}],["showtoken",{"_index":902,"title":{},"body":{"classes/UserEntity.html":{}}}],["signoptions",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["skip",{"_index":390,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"modules/CategoryModule.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"modules/UserModule.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["src/.../constants.ts",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../current",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1067,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.decorator.ts",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:20",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module.ts",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":1002,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/current",{"_index":1006,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/gql.guard.ts",{"_index":426,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["src/auth/gql.guard.ts:16",{"_index":435,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":475,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:21",{"_index":479,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":477,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":497,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:19",{"_index":502,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:8",{"_index":499,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/category/category.dto.ts",{"_index":178,"title":{},"body":{"classes/CategoryDTO.html":{},"coverage.html":{}}}],["src/category/category.dto.ts:5",{"_index":182,"title":{},"body":{"classes/CategoryDTO.html":{}}}],["src/category/category.dto.ts:8",{"_index":183,"title":{},"body":{"classes/CategoryDTO.html":{}}}],["src/category/category.entity.ts",{"_index":186,"title":{},"body":{"classes/CategoryEntity.html":{},"coverage.html":{}}}],["src/category/category.entity.ts:12",{"_index":192,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/category/category.entity.ts:15",{"_index":196,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/category/category.entity.ts:18",{"_index":190,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/category/category.entity.ts:21",{"_index":194,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/category/category.module.ts",{"_index":213,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.resolver.ts",{"_index":224,"title":{},"body":{"classes/CategoryResolver.html":{},"coverage.html":{}}}],["src/category/category.resolver.ts:14",{"_index":230,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["src/category/category.resolver.ts:21",{"_index":232,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["src/category/category.resolver.ts:26",{"_index":235,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["src/category/category.resolver.ts:31",{"_index":241,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["src/category/category.resolver.ts:36",{"_index":239,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["src/category/category.resolver.ts:45",{"_index":244,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["src/category/category.service.ts",{"_index":259,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:10",{"_index":266,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:18",{"_index":272,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:25",{"_index":271,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:36",{"_index":273,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:44",{"_index":269,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/comment/comment.dto.ts",{"_index":293,"title":{},"body":{"classes/CommentDTO.html":{},"coverage.html":{}}}],["src/comment/comment.dto.ts:5",{"_index":295,"title":{},"body":{"classes/CommentDTO.html":{}}}],["src/comment/comment.entity.ts",{"_index":297,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/comment/comment.entity.ts:15",{"_index":307,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/comment/comment.entity.ts:18",{"_index":303,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/comment/comment.entity.ts:21",{"_index":306,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/comment/comment.entity.ts:25",{"_index":302,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/comment/comment.entity.ts:28",{"_index":309,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/comment/comment.module.ts",{"_index":317,"title":{},"body":{"modules/CommentModule.html":{}}}],["src/comment/comment.resolver.ts",{"_index":323,"title":{},"body":{"classes/CommentResolver.html":{},"coverage.html":{}}}],["src/comment/comment.resolver.ts:13",{"_index":329,"title":{},"body":{"classes/CommentResolver.html":{}}}],["src/comment/comment.resolver.ts:19",{"_index":332,"title":{},"body":{"classes/CommentResolver.html":{}}}],["src/comment/comment.resolver.ts:31",{"_index":335,"title":{},"body":{"classes/CommentResolver.html":{}}}],["src/comment/comment.resolver.ts:9",{"_index":327,"title":{},"body":{"classes/CommentResolver.html":{}}}],["src/comment/comment.service.ts",{"_index":353,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/comment/comment.service.ts:10",{"_index":361,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:20",{"_index":378,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:28",{"_index":372,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:38",{"_index":376,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:48",{"_index":364,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:68",{"_index":367,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:79",{"_index":365,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/config/config.module.ts",{"_index":404,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service.ts",{"_index":410,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{}}}],["src/config/config.service.ts:14",{"_index":417,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:6",{"_index":413,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/main.ts",{"_index":1016,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/post",{"_index":691,"title":{},"body":{"classes/PostResponseDTO.html":{},"coverage.html":{}}}],["src/post/post.controller.ts",{"_index":535,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:24",{"_index":562,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:29",{"_index":565,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:35",{"_index":554,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:44",{"_index":568,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:50",{"_index":578,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:60",{"_index":557,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:66",{"_index":560,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:72",{"_index":574,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:78",{"_index":549,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:84",{"_index":571,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.dto.ts",{"_index":615,"title":{},"body":{"classes/PostDTO.html":{},"coverage.html":{}}}],["src/post/post.dto.ts:5",{"_index":617,"title":{},"body":{"classes/PostDTO.html":{}}}],["src/post/post.dto.ts:8",{"_index":618,"title":{},"body":{"classes/PostDTO.html":{}}}],["src/post/post.entity",{"_index":974,"title":{},"body":{"classes/UserResponseDTO.html":{}}}],["src/post/post.entity.ts",{"_index":619,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:19",{"_index":628,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:22",{"_index":624,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:25",{"_index":626,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:28",{"_index":627,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:31",{"_index":635,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:35",{"_index":625,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:38",{"_index":623,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:42",{"_index":632,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.entity.ts:45",{"_index":633,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/post/post.module.ts",{"_index":645,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.resolver.ts",{"_index":652,"title":{},"body":{"classes/PostResolver.html":{},"coverage.html":{}}}],["src/post/post.resolver.ts:18",{"_index":656,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:25",{"_index":671,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:30",{"_index":666,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:36",{"_index":660,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:49",{"_index":676,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:62",{"_index":661,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:69",{"_index":663,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:76",{"_index":658,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:83",{"_index":675,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.resolver.ts:89",{"_index":673,"title":{},"body":{"classes/PostResolver.html":{}}}],["src/post/post.service",{"_index":276,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/post/post.service.ts",{"_index":703,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:118",{"_index":713,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:12",{"_index":708,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:131",{"_index":716,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:149",{"_index":709,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:174",{"_index":725,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:22",{"_index":724,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:33",{"_index":715,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:39",{"_index":719,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:52",{"_index":722,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:62",{"_index":711,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:86",{"_index":717,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:97",{"_index":727,"title":{},"body":{"injectables/PostService.html":{}}}],["src/reply/reply.controller.ts",{"_index":767,"title":{},"body":{"controllers/ReplyController.html":{},"coverage.html":{}}}],["src/reply/reply.controller.ts:21",{"_index":782,"title":{},"body":{"controllers/ReplyController.html":{}}}],["src/reply/reply.controller.ts:26",{"_index":785,"title":{},"body":{"controllers/ReplyController.html":{}}}],["src/reply/reply.controller.ts:32",{"_index":776,"title":{},"body":{"controllers/ReplyController.html":{}}}],["src/reply/reply.controller.ts:41",{"_index":787,"title":{},"body":{"controllers/ReplyController.html":{}}}],["src/reply/reply.controller.ts:47",{"_index":779,"title":{},"body":{"controllers/ReplyController.html":{}}}],["src/reply/reply.dto.ts",{"_index":802,"title":{},"body":{"classes/ReplyDTO.html":{},"coverage.html":{}}}],["src/reply/reply.dto.ts:5",{"_index":803,"title":{},"body":{"classes/ReplyDTO.html":{}}}],["src/reply/reply.entity.ts",{"_index":804,"title":{},"body":{"classes/ReplyEntity.html":{},"coverage.html":{}}}],["src/reply/reply.entity.ts:17",{"_index":809,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["src/reply/reply.entity.ts:20",{"_index":808,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["src/reply/reply.entity.ts:23",{"_index":806,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["src/reply/reply.entity.ts:27",{"_index":805,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["src/reply/reply.entity.ts:30",{"_index":810,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["src/reply/reply.entity.ts:33",{"_index":807,"title":{},"body":{"classes/ReplyEntity.html":{}}}],["src/reply/reply.module.ts",{"_index":817,"title":{},"body":{"modules/ReplyModule.html":{}}}],["src/reply/reply.resolver.ts",{"_index":823,"title":{},"body":{"classes/ReplyResolver.html":{},"coverage.html":{}}}],["src/reply/reply.resolver.ts:18",{"_index":825,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["src/reply/reply.resolver.ts:25",{"_index":831,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["src/reply/reply.resolver.ts:31",{"_index":828,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["src/reply/reply.resolver.ts:43",{"_index":829,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["src/reply/reply.resolver.ts:49",{"_index":827,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["src/reply/reply.service.ts",{"_index":838,"title":{},"body":{"injectables/ReplyService.html":{},"coverage.html":{}}}],["src/reply/reply.service.ts:10",{"_index":841,"title":{},"body":{"injectables/ReplyService.html":{}}}],["src/reply/reply.service.ts:20",{"_index":850,"title":{},"body":{"injectables/ReplyService.html":{}}}],["src/reply/reply.service.ts:28",{"_index":847,"title":{},"body":{"injectables/ReplyService.html":{}}}],["src/reply/reply.service.ts:38",{"_index":848,"title":{},"body":{"injectables/ReplyService.html":{}}}],["src/reply/reply.service.ts:48",{"_index":843,"title":{},"body":{"injectables/ReplyService.html":{}}}],["src/reply/reply.service.ts:66",{"_index":845,"title":{},"body":{"injectables/ReplyService.html":{}}}],["src/reply/reply.service.ts:77",{"_index":844,"title":{},"body":{"injectables/ReplyService.html":{}}}],["src/shared/http",{"_index":443,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts",{"_index":509,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts:14",{"_index":514,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/user/dto/user",{"_index":701,"title":{},"body":{"classes/PostResponseDTO.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResponseDTO.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":863,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:19",{"_index":871,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:24",{"_index":868,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.decorator.ts",{"_index":1022,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.entity.ts",{"_index":879,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:22",{"_index":889,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:28",{"_index":888,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:34",{"_index":894,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:38",{"_index":892,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:41",{"_index":884,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:44",{"_index":893,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:48",{"_index":883,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:51",{"_index":899,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:55",{"_index":901,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:70",{"_index":896,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.module.ts",{"_index":933,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.resolver.ts",{"_index":945,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["src/user/user.resolver.ts:19",{"_index":948,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:26",{"_index":959,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:31",{"_index":956,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:37",{"_index":962,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:43",{"_index":950,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:52",{"_index":952,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:62",{"_index":954,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.service.ts",{"_index":975,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":978,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:16",{"_index":984,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":982,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:36",{"_index":980,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":983,"title":{},"body":{"injectables/UserService.html":{}}}],["ssl",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["sstay",{"_index":1095,"title":{},"body":{"index.html":{}}}],["start",{"_index":1079,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1082,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1084,"title":{},"body":{"index.html":{}}}],["started",{"_index":1069,"title":{"index.html":{}},"body":{}}],["statements",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":459,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["store",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{}}}],["super",{"_index":489,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1103,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1104,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1024,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1023,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":388,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["tap",{"_index":518,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["test",{"_index":1087,"title":{},"body":{"index.html":{}}}],["test:covdocumentation",{"_index":1090,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1089,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1086,"title":{},"body":{"index.html":{}}}],["text",{"_index":886,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.appservice.gethello",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateuser(data",{"_index":508,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.bookmarks",{"_index":918,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.categoryrepository.create",{"_index":289,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.find",{"_index":280,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone",{"_index":282,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PostService.html":{}}}],["this.categoryrepository.save(category",{"_index":291,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.createcategory(data",{"_index":256,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["this.categoryservice.show(id",{"_index":252,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["this.categoryservice.showall",{"_index":250,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["this.categoryservice.showforumcategory",{"_index":253,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["this.commentrepositorty.create",{"_index":396,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepositorty.find",{"_index":387,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepositorty.findone",{"_index":398,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepositorty.remove(comment",{"_index":401,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepositorty.save(comment",{"_index":397,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentservice.create(replyid",{"_index":350,"title":{},"body":{"classes/CommentResolver.html":{}}}],["this.commentservice.deletecomment(id",{"_index":352,"title":{},"body":{"classes/CommentResolver.html":{}}}],["this.commentservice.show(id",{"_index":345,"title":{},"body":{"classes/CommentResolver.html":{}}}],["this.commentservice.showbyreply(id",{"_index":837,"title":{},"body":{"classes/ReplyResolver.html":{}}}],["this.ensureownership(post",{"_index":744,"title":{},"body":{"injectables/PostService.html":{}}}],["this.envconfig",{"_index":423,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.envconfig[key",{"_index":425,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.jwtservice.sign(payload",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":911,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.postrepository.create",{"_index":741,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.delete",{"_index":746,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find",{"_index":736,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findone",{"_index":743,"title":{},"body":{"injectables/PostService.html":{},"injectables/ReplyService.html":{}}}],["this.postrepository.save(post",{"_index":742,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.update",{"_index":745,"title":{},"body":{"injectables/PostService.html":{}}}],["this.posts",{"_index":916,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.postservice.bookmark(id",{"_index":611,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.postservice.create(userid",{"_index":595,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.postservice.delete(id",{"_index":603,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.postservice.like(id",{"_index":606,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.postservice.show(id",{"_index":597,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.postservice.showall(page",{"_index":588,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.postservice.showbycategory(id",{"_index":258,"title":{},"body":{"classes/CategoryResolver.html":{}}}],["this.postservice.unbookmark(id",{"_index":614,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.postservice.update(id",{"_index":600,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["this.replyrepository.create",{"_index":856,"title":{},"body":{"injectables/ReplyService.html":{}}}],["this.replyrepository.find",{"_index":853,"title":{},"body":{"injectables/ReplyService.html":{}}}],["this.replyrepository.findone",{"_index":393,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ReplyService.html":{}}}],["this.replyrepository.remove(reply",{"_index":861,"title":{},"body":{"injectables/ReplyService.html":{}}}],["this.replyrepository.save(reply",{"_index":857,"title":{},"body":{"injectables/ReplyService.html":{}}}],["this.replyservice.create(postid",{"_index":797,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{}}}],["this.replyservice.deletereply(id",{"_index":801,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{}}}],["this.replyservice.show(id",{"_index":799,"title":{},"body":{"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{}}}],["this.replyservice.showbypost(id",{"_index":689,"title":{},"body":{"classes/PostResolver.html":{}}}],["this.replyservice.showbypost(postid",{"_index":793,"title":{},"body":{"controllers/ReplyController.html":{}}}],["this.replyservice.showbyuser(id",{"_index":973,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.replyservice.showbyuser(userid",{"_index":795,"title":{},"body":{"controllers/ReplyController.html":{}}}],["this.toresponseobject(comment",{"_index":392,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.toresponseobject(post",{"_index":740,"title":{},"body":{"injectables/PostService.html":{}}}],["this.toresponseobject(reply",{"_index":855,"title":{},"body":{"injectables/ReplyService.html":{}}}],["this.userrepository.create(data",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":985,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":394,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":761,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["this.userservice.login(data",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.login(user",{"_index":970,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.read(email",{"_index":966,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.register(data",{"_index":878,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.register(user",{"_index":972,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.showall(page",{"_index":876,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["throw",{"_index":283,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":463,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["todo",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":481,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"classes/UserResponseDTO.html":{},"dependencies.html":{}}}],["tools",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["toresponseobject",{"_index":357,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{}}}],["toresponseobject(comment",{"_index":377,"title":{},"body":{"injectables/CommentService.html":{}}}],["toresponseobject(post",{"_index":723,"title":{},"body":{"injectables/PostService.html":{}}}],["toresponseobject(reply",{"_index":849,"title":{},"body":{"injectables/ReplyService.html":{}}}],["toresponseobject(showtoken",{"_index":900,"title":{},"body":{"classes/UserEntity.html":{}}}],["touch",{"_index":1096,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":905,"title":{},"body":{"classes/UserEntity.html":{},"dependencies.html":{}}}],["true",{"_index":590,"title":{},"body":{"controllers/PostController.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["true})@exclude",{"_index":891,"title":{},"body":{"classes/UserEntity.html":{}}}],["true})@jointable",{"_index":631,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["tsconfig.json",{"_index":1094,"title":{},"body":{"index.html":{}}}],["type",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryDTO.html":{},"classes/CategoryEntity.html":{},"classes/CategoryResolver.html":{},"injectables/CategoryService.html":{},"classes/CommentDTO.html":{},"classes/CommentEntity.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"classes/ConfigService.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/PostEntity.html":{},"classes/PostResolver.html":{},"classes/PostResponseDTO.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyDTO.html":{},"classes/ReplyEntity.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":202,"title":{},"body":{"classes/CategoryEntity.html":{},"injectables/CategoryService.html":{},"classes/CommentEntity.html":{},"injectables/CommentService.html":{},"classes/PostEntity.html":{},"injectables/PostService.html":{},"classes/ReplyEntity.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":651,"title":{},"body":{"modules/PostModule.html":{},"modules/ReplyModule.html":{}}}],["typeormmodule.forfeature([categoryentity",{"_index":223,"title":{},"body":{"modules/CategoryModule.html":{}}}],["typeormmodule.forfeature([replyentity",{"_index":322,"title":{},"body":{"modules/CommentModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":939,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["unauthorizedexception",{"_index":505,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unbookmark",{"_index":654,"title":{},"body":{"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["unbookmark(@args('id",{"_index":687,"title":{},"body":{"classes/PostResolver.html":{}}}],["unbookmark(id",{"_index":674,"title":{},"body":{"classes/PostResolver.html":{},"injectables/PostService.html":{}}}],["unbookmarkpost",{"_index":544,"title":{},"body":{"controllers/PostController.html":{}}}],["unbookmarkpost(@param('id",{"_index":613,"title":{},"body":{"controllers/PostController.html":{}}}],["unbookmarkpost(id",{"_index":569,"title":{},"body":{"controllers/PostController.html":{}}}],["undefined",{"_index":189,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ReplyEntity.html":{},"classes/UserEntity.html":{}}}],["unique",{"_index":887,"title":{},"body":{"classes/UserEntity.html":{}}}],["unit",{"_index":1085,"title":{},"body":{"index.html":{}}}],["unlikepost",{"_index":545,"title":{},"body":{"controllers/PostController.html":{}}}],["unlikepost(@param('id",{"_index":608,"title":{},"body":{"controllers/PostController.html":{}}}],["unlikepost(id",{"_index":572,"title":{},"body":{"controllers/PostController.html":{}}}],["update",{"_index":706,"title":{},"body":{"injectables/PostService.html":{}}}],["update(id",{"_index":726,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":622,"title":{},"body":{"classes/PostEntity.html":{},"classes/PostResponseDTO.html":{}}}],["updatedatecolumn",{"_index":634,"title":{},"body":{"classes/PostEntity.html":{}}}],["updatepost",{"_index":546,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["updatepost(id",{"_index":575,"title":{},"body":{"controllers/PostController.html":{},"classes/PostResolver.html":{}}}],["url",{"_index":532,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["use",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useclass",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"classes/CommentResolver.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["useguards(authguard('jwt",{"_index":592,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["useguards(authguard('local",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(gqlauthguard",{"_index":346,"title":{},"body":{"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["useguards(undefined)@post('auth/login",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user('id",{"_index":593,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["user(@args('email",{"_index":965,"title":{},"body":{"classes/UserResolver.html":{}}}],["user(email",{"_index":955,"title":{},"body":{"classes/UserResolver.html":{}}}],["user.bookmarks",{"_index":758,"title":{},"body":{"injectables/PostService.html":{}}}],["user.bookmarks.filter",{"_index":759,"title":{},"body":{"injectables/PostService.html":{}}}],["user.bookmarks.filter(bookmark",{"_index":755,"title":{},"body":{"injectables/PostService.html":{}}}],["user.comparepassword(password",{"_index":988,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":935,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":340,"title":{},"body":{"classes/CommentResolver.html":{},"classes/PostResolver.html":{},"classes/ReplyResolver.html":{},"classes/UserResolver.html":{}}}],["user.decorator.ts",{"_index":1007,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.entity",{"_index":936,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["user.id).length",{"_index":750,"title":{},"body":{"injectables/PostService.html":{}}}],["user.resolver",{"_index":938,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":872,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{}}}],["user.toresponseobject",{"_index":765,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["user.toresponseobject(false",{"_index":987,"title":{},"body":{"injectables/UserService.html":{}}}],["user/dto/user",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user/user.decorator",{"_index":585,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReplyController.html":{}}}],["user/user.entity",{"_index":222,"title":{},"body":{"modules/CategoryModule.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"injectables/ReplyService.html":{}}}],["user/user.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":862,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userentity",{"_index":221,"title":{"classes/UserEntity.html":{}},"body":{"modules/CategoryModule.html":{},"classes/CommentEntity.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/ReplyEntity.html":{},"modules/ReplyModule.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":349,"title":{},"body":{"classes/CommentResolver.html":{},"injectables/CommentService.html":{},"controllers/PostController.html":{},"classes/PostResolver.html":{},"injectables/PostService.html":{},"controllers/ReplyController.html":{},"classes/ReplyResolver.html":{},"injectables/ReplyService.html":{}}}],["userlogindto",{"_index":154,"title":{"classes/UserLoginDTO.html":{}},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"classes/UserLoginDTO.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usermodule",{"_index":68,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":880,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"classes/UserResponseDTO.html":{}}}],["username/password",{"_index":990,"title":{},"body":{"injectables/UserService.html":{}}}],["usernamefield",{"_index":506,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userregisterdto",{"_index":866,"title":{"classes/UserRegisterDTO.html":{}},"body":{"controllers/UserController.html":{},"classes/UserRegisterDTO.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrepository",{"_index":360,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"injectables/UserService.html":{}}}],["userresolver",{"_index":937,"title":{"classes/UserResolver.html":{}},"body":{"modules/UserModule.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["userresponsedto",{"_index":693,"title":{"classes/UserResponseDTO.html":{}},"body":{"classes/PostResponseDTO.html":{},"classes/UserEntity.html":{},"classes/UserResponseDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users",{"_index":946,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["users(@args('page",{"_index":964,"title":{},"body":{"classes/UserResolver.html":{}}}],["users(page",{"_index":957,"title":{},"body":{"classes/UserResolver.html":{}}}],["users.map(user",{"_index":986,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":146,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":407,"title":{},"body":{"modules/ConfigModule.html":{}}}],["validate",{"_index":476,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":500,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":478,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(data",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":503,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validator",{"_index":184,"title":{},"body":{"classes/CategoryDTO.html":{},"classes/CommentDTO.html":{},"classes/PostDTO.html":{},"classes/ReplyDTO.html":{},"classes/UserLoginDTO.html":{},"classes/UserRegisterDTO.html":{},"dependencies.html":{}}}],["value",{"_index":373,"title":{},"body":{"injectables/CommentService.html":{},"injectables/PostService.html":{},"injectables/ReplyService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["variable",{"_index":1003,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1111,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":453,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/PostService.html":{}}}],["want",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["watch",{"_index":1080,"title":{},"body":{"index.html":{}}}],["website",{"_index":1097,"title":{},"body":{"index.html":{}}}],["whoami",{"_index":947,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":967,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":960,"title":{},"body":{"classes/UserResolver.html":{}}}],["world",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":720,"title":{},"body":{"injectables/PostService.html":{}}}],["yume",{"_index":1070,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentModule.html":{},"modules/ConfigModule.html":{},"modules/PostModule.html":{},"modules/ReplyModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('auth/login')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Post, Request } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private readonly authService: AuthService,\n  ) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @UseGuards(AuthGuard('local'))\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nReplyModule\n\nReplyModule\n\nAppModule -->\n\nReplyModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CommentModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            ReplyModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n// import { ConfigService } from './config/config.service';\nimport { ConfigModule } from './config/config.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { PostModule } from './post/post.module';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { HttpErrorFilter } from './shared/http-error.filter';\nimport { LoggingInterceptor } from './shared/logging.interceptor';\nimport { ReplyModule } from './reply/reply.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { CommentModule } from './comment/comment.module';\nimport { CategoryModule } from './category/category.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: ({ req }) => ({ req }),\n    }),\n    ConfigModule,\n    AuthModule,\n    UserModule,\n    PostModule,\n    ReplyModule,\n    CommentModule,\n    CategoryModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UserModule } from '../user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    /**\n     * Register jwt as default strategy, but this passport module here is not available globally.\n     * So if you want default strategy to be 'jwt' import passport module in that module too\n     * https://github.com/nestjs/nest/issues/1031#issuecomment-417920007\n     */\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  providers: [AuthService, JwtStrategy, LocalStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(data: UserLoginDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UserLoginDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../user/user.service';\nimport { UserLoginDTO } from '../user/dto/user-login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateUser(data: UserLoginDTO): Promise {\n    const user = await this.userService.login(data);\n    if (user) {\n      return user;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    /**\n     * This payload is what is sent to the user.\n     * So, the decoded payload from user will also only have these values\n     * Payload : {email, id}\n     */\n    const payload = { email: user.email, id: user.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n      user,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryDTO.html":{"url":"classes/CategoryDTO.html","title":"class - CategoryDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                parent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class CategoryDTO {\n  @IsString()\n  name: string;\n\n  @IsString()\n  parent?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryEntity.html":{"url":"classes/CategoryEntity.html","title":"class - CategoryEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                parent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CategoryEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CategoryEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\n\n@Entity('category')\nexport class CategoryEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ManyToOne(type => CategoryEntity, category => category.children)\n  parent: CategoryEntity;\n\n  @OneToMany(type => CategoryEntity, category => category.parent)\n  children: CategoryEntity[];\n\n  @Column('text')\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPostService\n\nPostService\n\nCategoryModule -->\n\nPostService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            PostService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryResolver } from './category.resolver';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CategoryEntity } from './category.entity';\nimport { PostEntity } from '../post/post.entity';\nimport { PostService } from '../post/post.service';\nimport { UserEntity } from '../user/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([CategoryEntity, PostEntity, UserEntity])],\n  providers: [CategoryService, CategoryResolver, PostService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryResolver.html":{"url":"classes/CategoryResolver.html","title":"class - CategoryResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                categories\n                            \n                            \n                                    Async\n                                category\n                            \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                forumCategories\n                            \n                            \n                                    Async\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryService: CategoryService, postService: PostService)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.resolver.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryService\n                                                  \n                                                        \n                                                                        CategoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            categories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    categories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('categories')\n                \n            \n\n            \n                \n                    Defined in src/category/category.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            category\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    category(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('category')\n                \n            \n\n            \n                \n                    Defined in src/category/category.resolver.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(name: string, parentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()\n                \n            \n\n            \n                \n                    Defined in src/category/category.resolver.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            forumCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forumCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('forumCategories')\n                \n            \n\n            \n                \n                    Defined in src/category/category.resolver.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            posts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(category)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveProperty()\n                \n            \n\n            \n                \n                    Defined in src/category/category.resolver.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Query,\n  Args,\n  ResolveProperty,\n  Parent,\n  Mutation,\n} from '@nestjs/graphql';\nimport { CategoryService } from './category.service';\nimport { PostService } from '../post/post.service';\nimport { CategoryDTO } from './category.dto';\n\n@Resolver('Category')\nexport class CategoryResolver {\n  constructor(\n    private readonly categoryService: CategoryService,\n    private readonly postService: PostService,\n  ) {}\n\n  @Query('categories')\n  async categories() {\n    return await this.categoryService.showAll();\n  }\n\n  @Query('category')\n  async category(@Args('id') id: string) {\n    return await this.categoryService.show(id);\n  }\n\n  @Query('forumCategories')\n  async forumCategories() {\n    return await this.categoryService.showForumCategory();\n  }\n\n  @Mutation()\n  async createCategory(\n    @Args('name') name: string,\n    @Args('parent') parentId: string,\n  ) {\n    const data: CategoryDTO = { name, parent: parentId };\n    return await this.categoryService.createCategory(data);\n  }\n\n  @ResolveProperty()\n  async posts(@Parent() category) {\n    const { id } = category;\n    return await this.postService.showByCategory(id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                show\n                            \n                            \n                                    Async\n                                showAll\n                            \n                            \n                                    Async\n                                showForumCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository, postRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(data: CategoryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            show\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    show(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showAll()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showForumCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showForumCategory()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { PostService } from 'src/post/post.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CategoryEntity } from './category.entity';\nimport { Repository, Not } from 'typeorm';\nimport { PostEntity } from '../post/post.entity';\nimport { CategoryDTO } from './category.dto';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(CategoryEntity)\n    private readonly categoryRepository: Repository,\n    @InjectRepository(PostEntity)\n    private readonly postRepository: Repository,\n  ) {}\n\n  async showAll() {\n    const categories = await this.categoryRepository.find({\n      relations: ['parent', 'children'],\n    });\n    return categories;\n  }\n\n  async show(id: string) {\n    const category = await this.categoryRepository.findOne({\n      where: { id },\n      relations: ['parent', 'children'],\n    });\n    if (!category) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    return category;\n  }\n\n  async showForumCategory() {\n    const categories = await this.categoryRepository.find({\n      where: { parent: null },\n      relations: ['children'],\n    });\n    return categories;\n  }\n\n  async createCategory(data: CategoryDTO) {\n    let parent = null;\n    if (data.parent) {\n      parent = await this.categoryRepository.findOne({\n        where: { id: data.parent },\n      });\n      if (!parent) {\n        throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n      }\n    }\n    const category = await this.categoryRepository.create({\n      name: data.name,\n      parent,\n    });\n    await this.categoryRepository.save(category);\n    return category;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentDTO.html":{"url":"classes/CommentDTO.html","title":"class - CommentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comment/comment.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class CommentDTO {\n  @IsString()\n  comment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                created\n                            \n                            \n                                id\n                            \n                            \n                                reply\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comment/comment.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comment/comment.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comment/comment.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comment/comment.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reply\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReplyEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comment/comment.entity.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinTable,\n} from 'typeorm';\nimport { UserEntity } from '../user/user.entity';\nimport { ReplyEntity } from '../reply/reply.entity';\n\n@Entity('comment')\nexport class CommentEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column('text')\n  comment: string;\n\n  @CreateDateColumn()\n  created: Date;\n\n  @ManyToOne(type => UserEntity)\n  @JoinTable()\n  author: UserEntity;\n\n  @ManyToOne(type => ReplyEntity, reply => reply.comments)\n  reply: ReplyEntity;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentModule.html":{"url":"modules/CommentModule.html","title":"module - CommentModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\n\nCommentService\n\nCommentService\n\n\n\nCommentModule\n\nCommentModule\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comment/comment.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommentService } from './comment.service';\nimport { CommentResolver } from './comment.resolver';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ReplyEntity } from '../reply/reply.entity';\nimport { UserEntity } from '../user/user.entity';\nimport { CommentEntity } from './comment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ReplyEntity, UserEntity, CommentEntity])],\n  providers: [CommentService, CommentResolver],\n})\nexport class CommentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentResolver.html":{"url":"classes/CommentResolver.html","title":"class - CommentResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comment\n                            \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentService: CommentService)\n                    \n                \n                        \n                            \n                                Defined in src/comment/comment.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentService\n                                                  \n                                                        \n                                                                        CommentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comment(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query()\n                \n            \n\n            \n                \n                    Defined in src/comment/comment.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(replyId: string, comment: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/comment/comment.resolver.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    replyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(id: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/comment/comment.resolver.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver, Args, Query, Mutation } from '@nestjs/graphql';\nimport { CommentService } from './comment.service';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from '../auth/gql.guard';\nimport { CurrentUser } from '../auth/current-user.decorator';\nimport { CommentDTO } from './comment.dto';\n\n@Resolver('Comment')\nexport class CommentResolver {\n  constructor(private readonly commentService: CommentService) {}\n\n  @Query()\n  async comment(@Args('id') id: string) {\n    return await this.commentService.show(id);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async createComment(\n    @Args('reply') replyId: string,\n    @Args('comment') comment: string,\n    @CurrentUser() user,\n  ) {\n    const data: CommentDTO = { comment };\n    const { id: userId } = user;\n    return await this.commentService.create(replyId, userId, data);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async deleteComment(@Args('id') id: string, @CurrentUser() user) {\n    const { id: userId } = user;\n    return await this.commentService.deleteComment(id, userId);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                show\n                            \n                            \n                                    Async\n                                showByReply\n                            \n                            \n                                    Async\n                                showByUser\n                            \n                            \n                                    Private\n                                toResponseObject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentRepositorty: Repository, replyRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comment/comment.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentRepositorty\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        replyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(replyId: string, userId: string, data: CommentDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/comment/comment.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    replyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(id: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comment/comment.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            show\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    show(commentId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comment/comment.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showByReply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showByReply(replyId: string, page: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comment/comment.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    replyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showByUser(userId: string, page: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comment/comment.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toResponseObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toResponseObject(comment: CommentEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/comment/comment.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CommentEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CommentEntity } from './comment.entity';\nimport { ReplyEntity } from '../reply/reply.entity';\nimport { UserEntity } from '../user/user.entity';\nimport { CommentDTO } from './comment.dto';\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectRepository(CommentEntity)\n    private readonly commentRepositorty: Repository,\n    @InjectRepository(ReplyEntity)\n    private readonly replyRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n  ) {}\n\n  private toResponseObject(comment: CommentEntity) {\n    const responseObject: any = comment;\n    if (comment.author) {\n      responseObject.author = comment.author.toResponseObject(false);\n    }\n    return responseObject;\n  }\n\n  async showByReply(replyId: string, page: number = 1) {\n    const comments = await this.commentRepositorty.find({\n      where: { reply: { id: replyId } },\n      relations: ['author'],\n      take: 25,\n      skip: 25 * (page - 1),\n    });\n    return comments.map(comment => this.toResponseObject(comment));\n  }\n\n  async showByUser(userId: string, page: number = 1) {\n    const comments = await this.commentRepositorty.find({\n      where: { author: { id: userId } },\n      relations: ['reply'],\n      take: 25,\n      skip: 25 * (page - 1),\n    });\n    return comments.map(comment => this.toResponseObject(comment));\n  }\n\n  async create(replyId: string, userId: string, data: CommentDTO) {\n    const reply = await this.replyRepository.findOne({\n      where: { id: replyId },\n    });\n    if (!reply) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    const user = await this.userRepository.findOne({ where: { id: userId } });\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    const comment = await this.commentRepositorty.create({\n      ...data,\n      reply,\n      author: user,\n    });\n    await this.commentRepositorty.save(comment);\n    return this.toResponseObject(comment);\n  }\n\n  async show(commentId: string) {\n    const comment = await this.commentRepositorty.findOne({\n      where: { id: commentId },\n      relations: ['author', 'reply'],\n    });\n    if (!comment) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    return this.toResponseObject(comment);\n  }\n\n  async deleteComment(id: string, userId: string) {\n    const comment = await this.commentRepositorty.findOne({\n      where: { id },\n      relations: ['author', 'reply'],\n    });\n    if (!comment) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    if (comment.author.id !== userId) {\n      throw new HttpException(\n        'User does not own comment',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    await this.commentRepositorty.remove(comment);\n    return this.toResponseObject(comment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n// @Global()\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService(\n        `${process.env.NODE_ENV || 'development'}.env`,\n      ),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                        \n                            \n                                    Defined in src/config/config.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\n\nexport class ConfigService {\n  private readonly envConfig: Record;\n\n  constructor(filePath: string) {\n    console.log('FilePATH: ' + filePath);\n    console.log(typeof filePath);\n    this.envConfig = dotenv.parse(fs.readFileSync(filePath));\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/gql.guard.ts\n        \n\n            \n                Description\n            \n            \n                This is the JWT Guard for the GraphQl Resolvers\nThis will add the authentication to Graphql\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequest\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/gql.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * This is the JWT Guard for the GraphQl Resolvers\n * This will add the authentication to Graphql\n */\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/http-error.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/http-error.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class HttpErrorFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    if (!ctx.getRequest()) {\n      return;\n    }\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const status = exception.getStatus();\n\n    const errorResponse = {\n      code: status,\n      timestamp: new Date().toLocaleDateString(),\n      path: request.url,\n      method: request.method,\n      message: exception.message.error || exception.message || null,\n    };\n\n    Logger.error(\n      `${request.method} ${request.url}`,\n      JSON.stringify(errorResponse),\n      'ExceptionFilter',\n    );\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n                    After decoding the jwt token. This object is attached to the request object.\nThis object is accessed by all the controllers and resolvers which have an\nauth guard in them\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  /**\n   * After decoding the jwt token. This object is attached to the request object.\n   * This object is accessed by all the controllers and resolvers which have an\n   * auth guard in them\n   */\n  async validate(payload: any) {\n    return { id: payload.id, email: payload.email };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:19\n                \n            \n\n\n            \n                \n                    After validating the login request, this returns the user object to be attached to the request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException, Logger } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UserLoginDTO } from '../user/dto/user-login.dto';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n    });\n  }\n\n  /**\n   * After validating the login request, this returns the user object to be attached to the request.\n   */\n  async validate(email: string, password: string): Promise {\n    const data: UserLoginDTO = { email, password };\n    const user = await this.authService.validateUser(data);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/logging.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { GqlExecutionContext, GraphQLExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    const request = context.switchToHttp().getRequest();\n    const now = Date.now();\n    const response = next.handle();\n\n    if (!request) {\n      const ctx: GraphQLExecutionContext = GqlExecutionContext.create(context);\n      const info = ctx.getInfo();\n\n      return response.pipe(\n        tap(() =>\n          Logger.log(\n            `${info.parentType} ${info.fieldName} ${Date.now() - now}ms`,\n            `${ctx.getContext().name}`,\n          ),\n        ),\n      );\n    }\n\n    const method = request.method;\n    const url = request.url;\n\n    return response.pipe(\n      tap(() =>\n        Logger.log(\n          `${method} ${url} ${Date.now() - now}ms`,\n          context.getClass().name,\n        ),\n      ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bookmarkPost\n                            \n                            \n                                createPost\n                            \n                            \n                                deletePost\n                            \n                            \n                                likePost\n                            \n                            \n                                showAllPosts\n                            \n                            \n                                showNewestPosts\n                            \n                            \n                                showPost\n                            \n                            \n                                unBookmarkPost\n                            \n                            \n                                unLikePost\n                            \n                            \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bookmarkPost\n                        \n                        \n                    \n                \n            \n            \n                \nbookmarkPost(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/bookmark')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePost(userId: string, data: PostDTO, categoryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':categoryId')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                PostDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deletePost\n                        \n                        \n                    \n                \n            \n            \n                \ndeletePost(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            likePost\n                        \n                        \n                    \n                \n            \n            \n                \nlikePost(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/like')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showAllPosts\n                        \n                        \n                    \n                \n            \n            \n                \nshowAllPosts(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showNewestPosts\n                        \n                        \n                    \n                \n            \n            \n                \nshowNewestPosts(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/newest')\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showPost\n                        \n                        \n                    \n                \n            \n            \n                \nshowPost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unBookmarkPost\n                        \n                        \n                    \n                \n            \n            \n                \nunBookmarkPost(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/bookmark')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unLikePost\n                        \n                        \n                    \n                \n            \n            \n                \nunLikePost(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/like')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \nupdatePost(id: string, userId: string, data: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Put,\n  Post,\n  Delete,\n  Body,\n  Param,\n  UseGuards,\n  Query,\n  Logger,\n  Request,\n} from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { PostDTO } from './post.dto';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from '../user/user.decorator';\n\n@Controller('post')\nexport class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Get()\n  showAllPosts(@Query('page') page: number) {\n    return this.postService.showAll(page);\n  }\n\n  @Get('/newest')\n  showNewestPosts(@Query('page') page: number) {\n    return this.postService.showAll(page, true);\n  }\n\n  @Post(':categoryId')\n  @UseGuards(AuthGuard('jwt'))\n  createPost(\n    @User('id') userId: string,\n    @Body() data: PostDTO,\n    @Param('categoryId') categoryId: string,\n  ) {\n    return this.postService.create(userId, categoryId, data);\n  }\n\n  @Get(':id')\n  showPost(@Param('id') id: string) {\n    return this.postService.show(id);\n  }\n\n  @Put(':id')\n  @UseGuards(AuthGuard('jwt'))\n  updatePost(\n    @Param('id') id: string,\n    @User('id') userId: string,\n    @Body() data: Partial,\n  ) {\n    return this.postService.update(id, userId, data);\n  }\n\n  @Delete(':id')\n  @UseGuards(AuthGuard('jwt'))\n  deletePost(@Param('id') id: string, @User('id') userId: string) {\n    return this.postService.delete(id, userId);\n  }\n\n  @Post(':id/like')\n  @UseGuards(AuthGuard('jwt'))\n  likePost(@Param('id') id: string, @User('id') userId: string) {\n    return this.postService.like(id, userId);\n  }\n\n  @Delete(':id/like')\n  @UseGuards(AuthGuard('jwt'))\n  unLikePost(@Param('id') id: string, @User('id') userId: string) {\n    return this.postService.like(id, userId);\n  }\n\n  @Post(':id/bookmark')\n  @UseGuards(AuthGuard('jwt'))\n  bookmarkPost(@Param('id') id: string, @User('id') userId: string) {\n    return this.postService.bookmark(id, userId);\n  }\n\n  @Delete(':id/bookmark')\n  @UseGuards(AuthGuard('jwt'))\n  unBookmarkPost(@Param('id') id: string, @User('id') userId: string) {\n    return this.postService.unBookmark(id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDTO.html":{"url":"classes/PostDTO.html","title":"class - PostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            caption\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class PostDTO {\n  @IsString()\n  caption: string;\n\n  @IsString()\n  comment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                caption\n                            \n                            \n                                category\n                            \n                            \n                                comment\n                            \n                            \n                                created\n                            \n                            \n                                id\n                            \n                            \n                                likes\n                            \n                            \n                                replies\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            caption\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CategoryEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            likes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {cascade: true})@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            replies\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReplyEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {cascade: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/post/post.entity.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  PrimaryGeneratedColumn,\n  Column,\n  Entity,\n  CreateDateColumn,\n  ManyToOne,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { UserEntity } from '../user/user.entity';\nimport { ReplyEntity } from '../reply/reply.entity';\nimport { CategoryEntity } from '../category/category.entity';\n\n@Entity('post')\nexport class PostEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column('text')\n  caption: string;\n\n  @Column('text')\n  comment: string;\n\n  @CreateDateColumn()\n  created: Date;\n\n  @UpdateDateColumn()\n  updated: Date;\n\n  @ManyToOne(type => CategoryEntity)\n  @JoinTable()\n  category: CategoryEntity;\n\n  @ManyToOne(type => UserEntity, author => author.posts)\n  author: UserEntity;\n\n  @ManyToMany(type => UserEntity, { cascade: true })\n  @JoinTable()\n  likes: UserEntity[];\n\n  @OneToMany(type => ReplyEntity, reply => reply.post, { cascade: true })\n  replies: ReplyEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nReplyService\n\nReplyService\n\nPostModule -->\n\nReplyService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                        \n                            ReplyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { PostController } from './post.controller';\nimport { PostService } from './post.service';\nimport { PostEntity } from './post.entity';\nimport { UserEntity } from '../user/user.entity';\nimport { PostResolver } from './post.resolver';\nimport { ReplyEntity } from '../reply/reply.entity';\nimport { ReplyService } from '../reply/reply.service';\nimport { CategoryEntity } from '../category/category.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      PostEntity,\n      UserEntity,\n      ReplyEntity,\n      CategoryEntity,\n    ]),\n  ],\n  controllers: [PostController],\n  providers: [PostService, PostResolver, ReplyService],\n  exports: [TypeOrmModule],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostResolver.html":{"url":"classes/PostResolver.html","title":"class - PostResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookmark\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                like\n                            \n                            \n                                    Async\n                                post\n                            \n                            \n                                    Async\n                                posts\n                            \n                            \n                                    Async\n                                replies\n                            \n                            \n                                    Async\n                                unbookmark\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postService: PostService, replyService: ReplyService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.resolver.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        replyService\n                                                  \n                                                        \n                                                                        ReplyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            bookmark\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    bookmark(id: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(caption: string, comment: string, categoryId: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    caption\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deletePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            like\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    like(id: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('post')\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            posts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(page: number, newest: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('posts')\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newest\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            replies\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    replies(post)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveProperty()\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unbookmark\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unbookmark(id: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: string, caption: string, comment: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/post/post.resolver.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    caption\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Args,\n  Query,\n  ResolveProperty,\n  Parent,\n  Mutation,\n  Context,\n} from '@nestjs/graphql';\nimport { PostService } from './post.service';\nimport { ReplyService } from '../reply/reply.service';\nimport { UseGuards } from '@nestjs/common';\nimport { PostDTO } from './post.dto';\nimport { GqlAuthGuard } from '../auth/gql.guard';\nimport { CurrentUser } from '../auth/current-user.decorator';\n\n@Resolver('Post')\nexport class PostResolver {\n  constructor(\n    private readonly postService: PostService,\n    private readonly replyService: ReplyService,\n  ) {}\n\n  @Query('posts')\n  async posts(@Args('page') page: number, @Args('newest') newest: boolean) {\n    return await this.postService.showAll(page, newest);\n  }\n\n  @Query('post')\n  async post(@Args('id') id: string) {\n    return await this.postService.show(id);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async createPost(\n    @Args('caption') caption: string,\n    @Args('comment') comment: string,\n    @Args('category') categoryId: string,\n    @CurrentUser() user,\n  ) {\n    const data: PostDTO = { caption, comment };\n    const { id: userId } = user;\n    return await this.postService.create(userId, categoryId, data);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async updatePost(\n    @Args('id') id: string,\n    @Args('caption') caption: string,\n    @Args('comment') comment: string,\n    @CurrentUser() user,\n  ) {\n    const data: PostDTO = { caption, comment };\n    const { id: userId } = user;\n    return await this.postService.update(id, userId, data);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async deletePost(@Args('id') id: string, @CurrentUser() user) {\n    const { id: userId } = user;\n    return await this.postService.delete(id, userId);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async like(@Args('id') id: string, @CurrentUser() user) {\n    const { id: userId } = user;\n    return await this.postService.like(id, userId);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async bookmark(@Args('id') id: string, @CurrentUser() user) {\n    const { id: userId } = user;\n    return await this.postService.bookmark(id, userId);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async unbookmark(@Args('id') id: string, @CurrentUser() user) {\n    const { id: userId } = user;\n    return await this.postService.unBookmark(id, userId);\n  }\n\n  @ResolveProperty()\n  async replies(@Parent() post) {\n    const { id } = post;\n    return await this.replyService.showByPost(id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostResponseDTO.html":{"url":"classes/PostResponseDTO.html","title":"class - PostResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post-response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                caption\n                            \n                            \n                                comment\n                            \n                            \n                                created\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                likes\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserResponseDTO\n\n                        \n                    \n                        \n                            \n                                    Defined in src/post/post-response.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            caption\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/post/post-response.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/post/post-response.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/post/post-response.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/post/post-response.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            likes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/post/post-response.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/post/post-response.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserResponseDTO } from 'src/user/dto/user-response.dto';\n\nexport class PostResponseDTO {\n  id?: string;\n  updated: Date;\n  created: Date;\n  caption: string;\n  comment: string;\n  author: UserResponseDTO;\n  likes?: number;\n  // replies?: Reply\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookmark\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Private\n                                ensureOwnership\n                            \n                            \n                                    Async\n                                like\n                            \n                            \n                                    Async\n                                show\n                            \n                            \n                                    Async\n                                showAll\n                            \n                            \n                                    Async\n                                showByCategory\n                            \n                            \n                                    Private\n                                toResponseObject\n                            \n                            \n                                    Async\n                                unBookmark\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, userRepository: Repository, categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            bookmark\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    bookmark(id: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, categoryId: string, data: PostDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                PostDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            ensureOwnership\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ensureOwnership(post: PostEntity, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            like\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    like(id: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            show\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    show(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showAll(page: number, newest?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                                \n                                    newest\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showByCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showByCategory(categoryId: string, page: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toResponseObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toResponseObject(post: PostEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PostResponseDTO\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unBookmark\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unBookmark(id: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, userId: string, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { PostEntity } from './post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PostDTO } from './post.dto';\nimport { UserEntity } from '../user/user.entity';\nimport { isDeclaration } from '@babel/types';\nimport { PostResponseDTO } from './post-response.dto';\nimport { CategoryEntity } from '../category/category.entity';\n\n@Injectable()\nexport class PostService {\n  constructor(\n    @InjectRepository(PostEntity)\n    private readonly postRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(CategoryEntity)\n    private readonly categoryRepository: Repository,\n  ) {}\n\n  private toResponseObject(post: PostEntity): PostResponseDTO {\n    const responseObject: any = {\n      ...post,\n      author: post.author.toResponseObject(false),\n    };\n    if (responseObject.likes) {\n      responseObject.likes = post.likes.length;\n    }\n    return responseObject;\n  }\n\n  private ensureOwnership(post: PostEntity, userId: string) {\n    if (post.author.id !== userId) {\n      throw new HttpException('Incorrect user', HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  async showAll(\n    page: number = 1,\n    newest?: boolean,\n  ): Promise {\n    const posts = await this.postRepository.find({\n      relations: ['author', 'likes', 'replies', 'category'],\n      take: 25,\n      skip: 25 * (page - 1),\n      order: newest && { created: 'DESC' },\n    });\n    return posts.map(post => this.toResponseObject(post));\n  }\n\n  async showByCategory(categoryId: string, page: number = 1) {\n    const posts = await this.postRepository.find({\n      where: { category: categoryId },\n      relations: ['author', 'likes', 'replies'],\n      take: 25,\n      skip: 25 * (page - 1),\n    });\n    return posts.map(post => this.toResponseObject(post));\n  }\n\n  async create(\n    userId: string,\n    categoryId: string,\n    data: PostDTO,\n  ): Promise {\n    const user = await this.userRepository.findOne({ where: { id: userId } });\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    const category = await this.categoryRepository.findOne({\n      where: { id: categoryId },\n    });\n    if (!category) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    const post = await this.postRepository.create({\n      ...data,\n      author: user,\n      category,\n    });\n    await this.postRepository.save(post);\n    return this.toResponseObject(post);\n  }\n\n  async show(id: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id },\n      relations: ['author', 'likes', 'replies', 'category'],\n    });\n    if (!post) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    return this.toResponseObject(post);\n  }\n\n  async update(\n    id: string,\n    userId: string,\n    data: Partial,\n  ): Promise {\n    let post = await this.postRepository.findOne({\n      where: { id },\n      relations: ['author'],\n    });\n    if (!post) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    this.ensureOwnership(post, userId);\n    await this.postRepository.update({ id }, data);\n    post = await this.postRepository.findOne({\n      where: { id },\n      relations: ['author', 'replies'],\n    });\n    return this.toResponseObject(post);\n  }\n\n  async delete(id: string, userId: string) {\n    const post = await this.postRepository.findOne({\n      where: { id },\n      relations: ['author', 'replies'],\n    });\n    if (!post) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    this.ensureOwnership(post, userId);\n    await this.postRepository.delete({ id });\n    return this.toResponseObject(post);\n  }\n\n  async like(id: string, userId: string) {\n    const post = await this.postRepository.findOne({\n      where: { id },\n      relations: ['author', 'likes', 'replies'],\n    });\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n    const user = await this.userRepository.findOne({ where: { id: userId } });\n    if (post.likes.filter(liker => liker.id === user.id).length > 0) {\n      post.likes = post.likes.filter(liker => liker.id !== user.id);\n    } else {\n      post.likes.push(user);\n    }\n    await this.postRepository.save(post);\n    return this.toResponseObject(post);\n  }\n\n  async bookmark(id: string, userId: string) {\n    const post = await this.postRepository.findOne({ where: { id } });\n    if (!post) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['bookmarks'],\n    });\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    if (user.bookmarks.filter(bookmark => bookmark.id === post.id).length  bookmark.id === post.id).length > 0) {\n      user.bookmarks = user.bookmarks.filter(\n        bookmark => bookmark.id !== post.id,\n      );\n      await this.userRepository.save(user);\n    } else {\n      throw new HttpException('Idea not bookmarked', HttpStatus.BAD_REQUEST);\n    }\n    return user.toResponseObject();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReplyController.html":{"url":"controllers/ReplyController.html","title":"controller - ReplyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReplyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reply/reply.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reply\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createReply\n                            \n                            \n                                deleteReply\n                            \n                            \n                                showRepliesByPost\n                            \n                            \n                                showRepliesByUser\n                            \n                            \n                                showReply\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createReply\n                        \n                        \n                    \n                \n            \n            \n                \ncreateReply(postId: string, userId: string, data: ReplyDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('post/:id')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ReplyDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteReply\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteReply(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showRepliesByPost\n                        \n                        \n                    \n                \n            \n            \n                \nshowRepliesByPost(postId: string, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('post/:id')\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showRepliesByUser\n                        \n                        \n                    \n                \n            \n            \n                \nshowRepliesByUser(userId: string, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id')\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showReply\n                        \n                        \n                    \n                \n            \n            \n                \nshowReply(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n  Body,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { ReplyService } from './reply.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from '../user/user.decorator';\nimport { ReplyDTO } from './reply.dto';\n\n@Controller('reply')\nexport class ReplyController {\n  constructor(private readonly replyService: ReplyService) {}\n\n  @Get('post/:id')\n  showRepliesByPost(@Param('id') postId: string, @Query('page') page: number) {\n    return this.replyService.showByPost(postId, page);\n  }\n\n  @Get('user/:id')\n  showRepliesByUser(@Param('id') userId: string, @Query('page') page: number) {\n    return this.replyService.showByUser(userId, page);\n  }\n\n  @Post('post/:id')\n  @UseGuards(AuthGuard('jwt'))\n  createReply(\n    @Param('id') postId: string,\n    @User('id') userId: string,\n    @Body() data: ReplyDTO,\n  ) {\n    return this.replyService.create(postId, userId, data);\n  }\n\n  @Get(':id')\n  showReply(@Param('id') id: string) {\n    return this.replyService.show(id);\n  }\n\n  @Delete(':id')\n  @UseGuards(AuthGuard('jwt'))\n  deleteReply(@Param('id') id: string, @User('id') userId: string) {\n    return this.replyService.deleteReply(id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReplyDTO.html":{"url":"classes/ReplyDTO.html","title":"class - ReplyDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReplyDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reply/reply.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/reply/reply.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ReplyDTO {\n  @IsString()\n  comment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReplyEntity.html":{"url":"classes/ReplyEntity.html","title":"class - ReplyEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReplyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reply/reply.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                comments\n                            \n                            \n                                created\n                            \n                            \n                                id\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/reply/reply.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/reply/reply.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CommentEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {cascade: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/reply/reply.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/reply/reply.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/reply/reply.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PostEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/reply/reply.entity.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  Column,\n  ManyToOne,\n  JoinTable,\n  OneToMany,\n} from 'typeorm';\nimport { UserEntity } from '../user/user.entity';\nimport { PostEntity } from '../post/post.entity';\nimport { CommentEntity } from '../comment/comment.entity';\n\n@Entity('reply')\nexport class ReplyEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn()\n  created: Date;\n\n  @Column('text')\n  comment: string;\n\n  @ManyToOne(type => UserEntity)\n  @JoinTable()\n  author: UserEntity;\n\n  @ManyToOne(type => PostEntity, post => post.replies)\n  post: PostEntity;\n\n  @OneToMany(type => CommentEntity, comment => comment.reply, { cascade: true })\n  comments: CommentEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReplyModule.html":{"url":"modules/ReplyModule.html","title":"module - ReplyModule","body":"\n                   \n\n\n\n\n    Modules\n    ReplyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReplyModule\n\n\n\ncluster_ReplyModule_providers\n\n\n\n\nCommentService\n\nCommentService\n\n\n\nReplyModule\n\nReplyModule\n\nReplyModule -->\n\nCommentService->ReplyModule\n\n\n\n\n\nReplyService\n\nReplyService\n\nReplyModule -->\n\nReplyService->ReplyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reply/reply.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentService\n                        \n                        \n                            ReplyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReplyController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReplyService } from './reply.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostEntity } from '../post/post.entity';\nimport { UserEntity } from '../user/user.entity';\nimport { ReplyEntity } from './reply.entity';\nimport { ReplyController } from './reply.controller';\nimport { ReplyResolver } from './reply.resolver';\nimport { CommentService } from '../comment/comment.service';\nimport { CommentEntity } from '../comment/comment.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      PostEntity,\n      UserEntity,\n      ReplyEntity,\n      CommentEntity,\n    ]),\n  ],\n  providers: [ReplyService, ReplyResolver, CommentService],\n  controllers: [ReplyController],\n})\nexport class ReplyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReplyResolver.html":{"url":"classes/ReplyResolver.html","title":"class - ReplyResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReplyResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reply/reply.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comments\n                            \n                            \n                                    Async\n                                createReply\n                            \n                            \n                                    Async\n                                deleteReply\n                            \n                            \n                                    Async\n                                reply\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(replyService: ReplyService, commentService: CommentService)\n                    \n                \n                        \n                            \n                                Defined in src/reply/reply.resolver.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        replyService\n                                                  \n                                                        \n                                                                        ReplyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentService\n                                                  \n                                                        \n                                                                        CommentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comments\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comments(reply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveProperty()\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.resolver.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reply\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createReply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createReply(postId: string, comment: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.resolver.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteReply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteReply(id: string, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.resolver.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reply(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query()\n                \n            \n\n            \n                \n                    Defined in src/reply/reply.resolver.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Query,\n  Args,\n  Mutation,\n  Context,\n  ResolveProperty,\n  Parent,\n} from '@nestjs/graphql';\nimport { ReplyService } from './reply.service';\nimport { UseGuards } from '@nestjs/common';\nimport { ReplyDTO } from './reply.dto';\nimport { GqlAuthGuard } from '../auth/gql.guard';\nimport { CurrentUser } from '../auth/current-user.decorator';\nimport { CommentService } from '../comment/comment.service';\n\n@Resolver('Reply')\nexport class ReplyResolver {\n  constructor(\n    private readonly replyService: ReplyService,\n    private readonly commentService: CommentService,\n  ) {}\n\n  @Query()\n  async reply(@Args('id') id: string) {\n    return await this.replyService.show(id);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async createReply(\n    @Args('post') postId: string,\n    @Args('comment') comment: string,\n    @CurrentUser() user,\n  ) {\n    const data: ReplyDTO = { comment };\n    const { id: userId } = user;\n    return await this.replyService.create(postId, userId, data);\n  }\n\n  @Mutation()\n  @UseGuards(GqlAuthGuard)\n  async deleteReply(@Args('id') id: string, @CurrentUser() user) {\n    const { id: userId } = user;\n    return await this.replyService.deleteReply(id, userId);\n  }\n\n  @ResolveProperty()\n  async comments(@Parent() reply) {\n    const { id } = reply;\n    return await this.commentService.showByReply(id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReplyService.html":{"url":"injectables/ReplyService.html","title":"injectable - ReplyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ReplyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reply/reply.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteReply\n                            \n                            \n                                    Async\n                                show\n                            \n                            \n                                    Async\n                                showByPost\n                            \n                            \n                                    Async\n                                showByUser\n                            \n                            \n                                    Private\n                                toResponseObject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(replyRepository: Repository, postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/reply/reply.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        replyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(postId: string, userId: string, data: ReplyDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/reply/reply.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ReplyDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteReply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteReply(id: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/reply/reply.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            show\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    show(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/reply/reply.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showByPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showByPost(postId: string, page: number)\n                \n            \n\n\n            \n                \n                    Defined in src/reply/reply.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showByUser(userId: string, page: number)\n                \n            \n\n\n            \n                \n                    Defined in src/reply/reply.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toResponseObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toResponseObject(reply: ReplyEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/reply/reply.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reply\n                                    \n                                                ReplyEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ReplyEntity } from './reply.entity';\nimport { PostEntity } from '../post/post.entity';\nimport { UserEntity } from '../user/user.entity';\nimport { ReplyDTO } from './reply.dto';\n\n@Injectable()\nexport class ReplyService {\n  constructor(\n    @InjectRepository(ReplyEntity)\n    private readonly replyRepository: Repository,\n    @InjectRepository(PostEntity)\n    private readonly postRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n  ) {}\n\n  private toResponseObject(reply: ReplyEntity) {\n    const responseObject: any = reply;\n    if (reply.author) {\n      responseObject.author = reply.author.toResponseObject(false);\n    }\n    return responseObject;\n  }\n\n  async showByPost(postId: string, page: number = 1) {\n    const replies = await this.replyRepository.find({\n      where: { post: { id: postId } },\n      relations: ['author'],\n      take: 25,\n      skip: 25 * (page - 1),\n    });\n    return replies.map(reply => this.toResponseObject(reply));\n  }\n\n  async showByUser(userId: string, page: number = 1) {\n    const replies = await this.replyRepository.find({\n      where: { author: { id: userId } },\n      relations: ['post'],\n      take: 25,\n      skip: 25 * (page - 1),\n    });\n    return replies.map(reply => this.toResponseObject(reply));\n  }\n\n  async create(postId: string, userId: string, data: ReplyDTO) {\n    const post = await this.postRepository.findOne({ where: { id: postId } });\n    if (!post) {\n      throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n    }\n    const user = await this.userRepository.findOne({ where: { id: userId } });\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    const reply = await this.replyRepository.create({\n      ...data,\n      post,\n      author: user,\n    });\n    await this.replyRepository.save(reply);\n    return this.toResponseObject(reply);\n  }\n\n  async show(id: string) {\n    const reply = await this.replyRepository.findOne({\n      where: { id },\n      relations: ['author', 'post'],\n    });\n    if (!reply) {\n      throw new HttpException('Reply does not exist', HttpStatus.BAD_REQUEST);\n    }\n    return this.toResponseObject(reply);\n  }\n\n  async deleteReply(id: string, userId: string) {\n    const reply = await this.replyRepository.findOne({\n      where: { id },\n      relations: ['author', 'post'],\n    });\n    if (!reply) {\n      throw new HttpException('Reply does not exist', HttpStatus.BAD_REQUEST);\n    }\n    if (reply.author.id !== userId) {\n      throw new HttpException(\n        'User does not own reply',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    await this.replyRepository.remove(reply);\n    return this.toResponseObject(reply);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                register\n                            \n                            \n                                showAllUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            register\n                        \n                        \n                    \n                \n            \n            \n                \nregister(data: UserRegisterDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UserRegisterDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \nshowAllUsers(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Body,\n  UseGuards,\n  Query,\n  Request,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserRegisterDTO } from './dto/user-register.dto';\nimport { UserLoginDTO } from './dto/user-login.dto';\n\n@Controller()\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get('users')\n  showAllUsers(@Query('page') page: number) {\n    return this.userService.showAll(page);\n  }\n\n  @Post('register')\n  register(@Body() data: UserRegisterDTO) {\n    return this.userService.register(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bookmarks\n                            \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                posts\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                toResponseObject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bookmarks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PostEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {cascade: true})@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', select: true})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            posts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PostEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(attempt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    attempt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/user/user.entity.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toResponseObject\n                        \n                        \n                    \n                \n            \n            \n                \ntoResponseObject(showToken: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    showToken\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserResponseDTO\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  BeforeInsert,\n  CreateDateColumn,\n  BeforeUpdate,\n  OneToMany,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\n\nimport * as bcrypt from 'bcryptjs';\nimport * as jwt from 'jsonwebtoken';\nimport { UserResponseDTO } from './dto/user-response.dto';\nimport { PostEntity } from '../post/post.entity';\n\n@Entity('user')\nexport class UserEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'text',\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'text',\n    unique: true,\n  })\n  username: string;\n\n  @Column({ type: 'text', select: true })\n  @Exclude()\n  password: string;\n\n  @CreateDateColumn()\n  created: Date;\n\n  @OneToMany(type => PostEntity, post => post.author)\n  posts: PostEntity[];\n\n  @ManyToMany(type => PostEntity, { cascade: true })\n  @JoinTable()\n  bookmarks: PostEntity[];\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n\n  toResponseObject(showToken: boolean = true): UserResponseDTO {\n    const { id, created, username, email } = this;\n    const responseObj: any = { id, created, username, email };\n    // if (showToken) {\n    //   responseObj.token = token;\n    // }\n    if (this.posts) {\n      responseObj.posts = this.posts;\n    }\n    if (this.bookmarks) {\n      responseObj.bookmarks = this.bookmarks;\n    }\n    return responseObj;\n  }\n\n  async comparePassword(attempt: string) {\n    return await bcrypt.compare(attempt, this.password);\n  }\n\n  // private get token() {\n  //   const { id, email } = this;\n  //   return jwt.sign(\n  //     {\n  //       id,\n  //       email,\n  //     },\n  //     'projectxy',\n  //     { expiresIn: '1d' },\n  //   );\n  // }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDTO.html":{"url":"classes/UserLoginDTO.html","title":"class - UserLoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-login.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-login.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-login.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class UserLoginDTO {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nReplyService\n\nReplyService\n\nUserModule -->\n\nReplyService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReplyService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ClassSerializerInterceptor } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './user.entity';\nimport { PostEntity } from '../post/post.entity';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { UserResolver } from './user.resolver';\nimport { ReplyEntity } from '../reply/reply.entity';\nimport { ReplyService } from '../reply/reply.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, PostEntity, ReplyEntity])],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n    UserResolver,\n    ReplyService,\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRegisterDTO.html":{"url":"classes/UserRegisterDTO.html","title":"class - UserRegisterDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRegisterDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-register.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-register.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-register.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-register.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class UserRegisterDTO {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                replies\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                            \n                                    Async\n                                whoami\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, replyService: ReplyService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.resolver.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        replyService\n                                                  \n                                                        \n                                                                        ReplyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(email: string, password: string, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation()\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            replies\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    replies(user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveProperty()\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            user\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    user(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query()\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            users\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    users(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('users')\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            whoami\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    whoami(user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query()@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user.resolver.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Query,\n  Args,\n  ResolveProperty,\n  Parent,\n  Mutation,\n  Context,\n} from '@nestjs/graphql';\nimport { UserService } from './user.service';\nimport { ReplyService } from '../reply/reply.service';\nimport { UserLoginDTO } from './dto/user-login.dto';\nimport { UserRegisterDTO } from './dto/user-register.dto';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from '../auth/gql.guard';\nimport { CurrentUser } from '../auth/current-user.decorator';\n\n@Resolver('User')\nexport class UserResolver {\n  constructor(\n    private readonly userService: UserService,\n    private readonly replyService: ReplyService,\n  ) {}\n\n  @Query('users')\n  async users(@Args('page') page: number) {\n    return await this.userService.showAll(page);\n  }\n\n  @Query()\n  async user(@Args('email') email: string) {\n    return await this.userService.read(email);\n  }\n\n  @Query()\n  @UseGuards(GqlAuthGuard)\n  async whoami(@CurrentUser() user) {\n    const { email } = user;\n    return await this.userService.read(email);\n  }\n\n  @Mutation()\n  async login(\n    @Args('email') email: string,\n    @Args('password') password: string,\n  ) {\n    const user: UserLoginDTO = { email, password };\n    return await this.userService.login(user);\n  }\n\n  @Mutation()\n  async register(\n    @Args('email') email: string,\n    @Args('password') password: string,\n    @Args('username') username: string,\n  ) {\n    const user: UserRegisterDTO = { email, password, username };\n    return await this.userService.register(user);\n  }\n\n  @ResolveProperty()\n  async replies(@Parent() user) {\n    const { id } = user;\n    return await this.replyService.showByUser(id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDTO.html":{"url":"classes/UserResponseDTO.html","title":"class - UserResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bookmarks\n                            \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                token\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            bookmarks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PostEntity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-response.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-response.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-response.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-response.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-response.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user-response.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PostEntity } from 'src/post/post.entity';\n\nexport class UserResponseDTO {\n  id: string;\n  username: string;\n  email: string;\n  token?: string;\n  created: Date;\n  bookmarks?: PostEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                read\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                showAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(data: UserLoginDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UserLoginDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            read\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    read(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(data: UserRegisterDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UserRegisterDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showAll(page: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserEntity } from './user.entity';\nimport { Repository, PrimaryGeneratedColumn } from 'typeorm';\nimport { UserRegisterDTO } from './dto/user-register.dto';\nimport { UserLoginDTO } from './dto/user-login.dto';\nimport { UserResponseDTO } from './dto/user-response.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n  ) {}\n\n  async showAll(page: number = 1): Promise {\n    const users = await this.userRepository.find({\n      relations: ['bookmarks', 'posts'],\n      take: 25,\n      skip: 25 * (page - 1),\n    });\n    return users.map(user => user.toResponseObject(false));\n  }\n\n  async read(email: string) {\n    const user = await this.userRepository.findOne({\n      where: { email },\n      relations: ['posts', 'bookmarks'],\n    });\n    if (!user) {\n      throw new HttpException('User does not exist', HttpStatus.BAD_REQUEST);\n    }\n    return user.toResponseObject(false);\n  }\n\n  async login(data: UserLoginDTO): Promise {\n    const { email, password } = data;\n    const user = await this.userRepository.findOne({ where: { email } });\n    if (!user || !(await user.comparePassword(password))) {\n      throw new HttpException(\n        'Invalid username/password',\n        HttpStatus.BAD_GATEWAY,\n      );\n    }\n    return user.toResponseObject();\n  }\n\n  async register(data: UserRegisterDTO): Promise {\n    const { email } = data;\n    let user = await this.userRepository.findOne({ where: { email } });\n    if (user) {\n      throw new HttpException('User already exists', HttpStatus.BAD_REQUEST);\n    }\n    user = await this.userRepository.create(data);\n    await this.userRepository.save(user);\n    return user.toResponseObject();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/gql.guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/category/category.dto.ts\n            \n            class\n            CategoryDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/category/category.entity.ts\n            \n            class\n            CategoryEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/category/category.resolver.ts\n            \n            class\n            CategoryResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/comment/comment.dto.ts\n            \n            class\n            CommentDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/comment/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/comment/comment.resolver.ts\n            \n            class\n            CommentResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/comment/comment.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/post-response.dto.ts\n            \n            class\n            PostResponseDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/post.dto.ts\n            \n            class\n            PostDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/post/post.resolver.ts\n            \n            class\n            PostResolver\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/reply/reply.controller.ts\n            \n            controller\n            ReplyController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/reply/reply.dto.ts\n            \n            class\n            ReplyDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/reply/reply.entity.ts\n            \n            class\n            ReplyEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/reply/reply.resolver.ts\n            \n            class\n            ReplyResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/reply/reply.service.ts\n            \n            injectable\n            ReplyService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/shared/http-error.filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/user-login.dto.ts\n            \n            class\n            UserLoginDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/user-register.dto.ts\n            \n            class\n            UserRegisterDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/user-response.dto.ts\n            \n            class\n            UserResponseDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/graphql : ^6.5.3\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/mongoose : ^6.1.2\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/typeorm : ^6.2.0\n        \n            apollo-server-express : ^2.9.7\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.10.2\n        \n            dotenv : ^8.2.0\n        \n            graphql : ^14.5.8\n        \n            graphql-tools : ^4.0.6\n        \n            jsonwebtoken : ^8.5.1\n        \n            mongoose : ^5.7.7\n        \n            passport : ^0.4.0\n        \n            passport-google-token : ^0.1.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^7.12.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            ssl-root-cas : ^1.3.1\n        \n            typeorm : ^0.2.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  Yume Firefly\n\n\n\n  \n\nDescription\nThe new backend for Yume.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDocumentation\n$ npx compodoc -p tsconfig.json -sStay in touch\n\nWebsite - https://yume.me\n\nLicense\nYume is property of Yume LLC.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReplyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nReplyModule\n\nReplyModule\n\nAppModule -->\n\nReplyModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPostService\n\nPostService\n\nCategoryModule -->\n\nPostService->CategoryModule\n\n\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\nReplyModule -->\n\nCommentService->ReplyModule\n\n\n\n\n\nReplyService\n\nReplyService\n\nPostModule -->\n\nReplyService->PostModule\n\n\n\nReplyModule -->\n\nReplyService->ReplyModule\n\n\n\nUserModule -->\n\nReplyService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/current-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CurrentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data, [root, args, ctx, info]) => ctx.req.user,\n)\n                        \n                    \n\n                \n                    \n                        This is the decorator for the graphql resolvers to get user.\nThere is also another user.decorator.ts for the rest apis.\n\n                    \n                \n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  secret: 'projectxy',\n}\n                        \n                    \n\n                \n                    \n                        Do not store this here. Use Environment Variables to store secret\nONLY FOR DEV\nTODO: Change this to environment variable\n\n                    \n                \n\n            \n        \n\n    src/user/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, request) => {\n  return data ? request.user[data] : request.user;\n})\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
